-- Filename     : and2x1.vhd
-- Description  : 2 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and2x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (52.488044 ps, 49.826274 ps);
  tpd_in2_q        : VitalDelayType01 := (59.251620 ps, 55.549836 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and2x1 : ENTITY IS TRUE;
END and2x1;

ARCHITECTURE behavioral OF and2x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and2x2.vhd
-- Description  : 2 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and2x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (61.450662 ps, 58.266663 ps);
  tpd_in2_q        : VitalDelayType01 := (67.448826 ps, 63.460172 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and2x2 : ENTITY IS TRUE;
END and2x2;

ARCHITECTURE behavioral OF and2x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and2x4.vhd
-- Description  : 2 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and2x4 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (96.133150 ps, 92.106671 ps);
  tpd_in2_q        : VitalDelayType01 := (101.984770 ps, 97.323983 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and2x4 : ENTITY IS TRUE;
END and2x4;

ARCHITECTURE behavioral OF and2x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and3x1.vhd
-- Description  : 3 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and3x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (74.267848 ps, 71.223832 ps);
  tpd_in2_q        : VitalDelayType01 := (82.985927 ps, 78.307508 ps);
  tpd_in3_q        : VitalDelayType01 := (90.006687 ps, 85.562205 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and3x1 : ENTITY IS TRUE;
END and3x1;

ARCHITECTURE behavioral OF and3x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and3x2.vhd
-- Description  : 3 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and3x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (87.687380 ps, 83.739102 ps);
  tpd_in2_q        : VitalDelayType01 := (96.183955 ps, 90.293602 ps);
  tpd_in3_q        : VitalDelayType01 := (103.422310 ps, 97.743552 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and3x2 : ENTITY IS TRUE;
END and3x2;

ARCHITECTURE behavioral OF and3x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and3x4.vhd
-- Description  : 3 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and3x4 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (130.564260 ps, 126.562170 ps);
  tpd_in2_q        : VitalDelayType01 := (139.582120 ps, 133.816670 ps);
  tpd_in3_q        : VitalDelayType01 := (147.439170 ps, 142.190910 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and3x4 : ENTITY IS TRUE;
END and3x4;

ARCHITECTURE behavioral OF and3x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and4x1.vhd
-- Description  : 4 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and4x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (75.527645 ps, 76.015798 ps);
  tpd_in2_q        : VitalDelayType01 := (87.406933 ps, 84.556952 ps);
  tpd_in3_q        : VitalDelayType01 := (98.552606 ps, 94.365252 ps);
  tpd_in4_q        : VitalDelayType01 := (101.751720 ps, 99.905495 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and4x1 : ENTITY IS TRUE;
END and4x1;

ARCHITECTURE behavioral OF and4x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and4x2.vhd
-- Description  : 4 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and4x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (88.823850 ps, 92.905207 ps);
  tpd_in2_q        : VitalDelayType01 := (99.129661 ps, 101.632950 ps);
  tpd_in3_q        : VitalDelayType01 := (110.449020 ps, 111.458900 ps);
  tpd_in4_q        : VitalDelayType01 := (113.695520 ps, 118.263110 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and4x2 : ENTITY IS TRUE;
END and4x2;

ARCHITECTURE behavioral OF and4x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : and4x4.vhd
-- Description  : 4 input AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY and4x4 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (135.983670 ps, 137.823530 ps);
  tpd_in2_q        : VitalDelayType01 := (147.456040 ps, 147.447110 ps);
  tpd_in3_q        : VitalDelayType01 := (158.885720 ps, 157.965090 ps);
  tpd_in4_q        : VitalDelayType01 := (161.336070 ps, 164.694760 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF and4x4 : ENTITY IS TRUE;
END and4x4;

ARCHITECTURE behavioral OF and4x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalAND4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao21x1.vhd
-- Description  : 2 wide 2-1 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao21x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (79.911843 ps, 78.659596 ps);
  tpd_in2_q        : VitalDelayType01 := (81.364541 ps, 84.237696 ps);
  tpd_in3_q        : VitalDelayType01 := (57.191457 ps, 65.485647 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao21x1 : ENTITY IS TRUE;
END ao21x1;

ARCHITECTURE behavioral OF ao21x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in1_ipd, in2_ipd );
q_zd := VitalOR2( g1_t, in3_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao21x2.vhd
-- Description  : 2 wide 2-1 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao21x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (99.804984 ps, 102.474080 ps);
  tpd_in2_q        : VitalDelayType01 := (101.797790 ps, 108.321040 ps);
  tpd_in3_q        : VitalDelayType01 := (76.068644 ps, 89.360341 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao21x2 : ENTITY IS TRUE;
END ao21x2;

ARCHITECTURE behavioral OF ao21x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in1_ipd, in2_ipd );
q_zd := VitalOR2( g1_t, in3_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao221x1.vhd
-- Description  : 3 wide 2-2-1 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao221x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (119.831060 ps, 148.936320 ps);
  tpd_in2_q         : VitalDelayType01 := (122.003870 ps, 156.441610 ps);
  tpd_in3_q         : VitalDelayType01 := (99.854671 ps, 131.814540 ps);
  tpd_in4_q         : VitalDelayType01 := (104.521420 ps, 140.528400 ps);
  tpd_in5_q         : VitalDelayType01 := (72.168172 ps, 97.735365 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao221x1 : ENTITY IS TRUE;
END ao221x1;

ARCHITECTURE behavioral OF ao221x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in3_ipd, in4_ipd );
q_zd := VitalOR3( g1_t, g2_t, in5_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao221x2.vhd
-- Description  : 3 wide 2-2-1 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao221x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (132.428730 ps, 170.449680 ps);
  tpd_in2_q         : VitalDelayType01 := (135.239730 ps, 178.655530 ps);
  tpd_in3_q         : VitalDelayType01 := (111.665460 ps, 154.378320 ps);
  tpd_in4_q         : VitalDelayType01 := (116.596800 ps, 163.077420 ps);
  tpd_in5_q         : VitalDelayType01 := (82.778839 ps, 119.271390 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao221x2 : ENTITY IS TRUE;
END ao221x2;

ARCHITECTURE behavioral OF ao221x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in3_ipd, in4_ipd );
q_zd := VitalOR3( g1_t, g2_t, in5_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao222x1.vhd
-- Description  : 3 wide 2-2-2 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao222x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (134.799190 ps, 182.456550 ps);
  tpd_in2_q         : VitalDelayType01 := (136.708990 ps, 191.115490 ps);
  tpd_in3_q         : VitalDelayType01 := (115.027120 ps, 165.123960 ps);
  tpd_in4_q         : VitalDelayType01 := (118.774080 ps, 173.045560 ps);
  tpd_in5_q         : VitalDelayType01 := (70.603118 ps, 105.491140 ps);
  tpd_in6_q         : VitalDelayType01 := (74.293400 ps, 113.061610 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao222x1 : ENTITY IS TRUE;
END ao222x1;

ARCHITECTURE behavioral OF ao222x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
g3_t := VitalAND2( in6_ipd, in5_ipd );
q_zd := VitalOR3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao222x2.vhd
-- Description  : 3 wide 2-2-2 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao222x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (142.086200 ps, 203.416030 ps);
  tpd_in2_q         : VitalDelayType01 := (145.085440 ps, 213.175580 ps);
  tpd_in3_q         : VitalDelayType01 := (121.527190 ps, 184.959080 ps);
  tpd_in4_q         : VitalDelayType01 := (126.019060 ps, 194.510410 ps);
  tpd_in5_q         : VitalDelayType01 := (79.467695 ps, 129.875000 ps);
  tpd_in6_q         : VitalDelayType01 := (82.690970 ps, 136.160750 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao222x2 : ENTITY IS TRUE;
END ao222x2;

ARCHITECTURE behavioral OF ao222x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
g3_t := VitalAND2( in6_ipd, in5_ipd );
q_zd := VitalOR3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao22x1.vhd
-- Description  : 2 wide 2-2 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao22x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (89.441095 ps, 109.845130 ps);
  tpd_in2_q        : VitalDelayType01 := (91.929919 ps, 117.387800 ps);
  tpd_in3_q        : VitalDelayType01 := (66.425824 ps, 89.123131 ps);
  tpd_in4_q        : VitalDelayType01 := (72.050706 ps, 96.453421 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao22x1 : ENTITY IS TRUE;
END ao22x1;

ARCHITECTURE behavioral OF ao22x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
q_zd := VitalOR2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ao22x2.vhd
-- Description  : 2 wide 2-2 AND-OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ao22x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (110.926210 ps, 141.103660 ps);
  tpd_in2_q        : VitalDelayType01 := (112.977730 ps, 148.295410 ps);
  tpd_in3_q        : VitalDelayType01 := (87.553408 ps, 119.770600 ps);
  tpd_in4_q        : VitalDelayType01 := (93.241519 ps, 127.438470 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ao22x2 : ENTITY IS TRUE;
END ao22x2;

ARCHITECTURE behavioral OF ao22x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
q_zd := VitalOR2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aobufx1.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aobufx1 IS
 GENERIC
 (
  tpd_inpp_q        : VitalDelayType01 := (36.973167 ps, 38.790399 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aobufx1 : ENTITY IS TRUE;
END aobufx1;

ARCHITECTURE behavioral OF aobufx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aobufx2.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aobufx2 IS
 GENERIC
 (
  tpd_inpp_q        : VitalDelayType01 := (45.881172 ps, 43.571878 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aobufx2 : ENTITY IS TRUE;
END aobufx2;

ARCHITECTURE behavioral OF aobufx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aobufx4.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aobufx4 IS
 GENERIC
 (
  tpd_inpp_q        : VitalDelayType01 := (66.136592 ps, 61.597687 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aobufx4 : ENTITY IS TRUE;
END aobufx4;

ARCHITECTURE behavioral OF aobufx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aodffarx1.vhd
-- Description  : DFF with rising edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aodffarx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (171.925530 ps, 144.549530 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (228.353810 ps, 257.143680 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 67.673456 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (216.638220 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 106.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 66.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 143.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 120.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 184.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 109.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aodffarx1 : ENTITY IS TRUE;
END aodffarx1;

ARCHITECTURE behavioral OF aodffarx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /AODFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /AODFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /AODFFARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /AODFFARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aodffarx2.vhd
-- Description  : DFF with rising edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aodffarx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (176.503810 ps, 161.683120 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (272.750120 ps, 285.396920 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 77.446911 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (228.487380 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 106.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 69.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 135.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 137.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 178.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 137.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aodffarx2 : ENTITY IS TRUE;
END aodffarx2;

ARCHITECTURE behavioral OF aodffarx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /AODFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /AODFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /AODFFARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /AODFFARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aodffnarx1.vhd
-- Description  : DFF with falling edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aodffnarx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (182.218020 ps, 199.714410 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (284.152660 ps, 266.855370 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (226.953010 ps, 1.000000 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 67.901215 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 28.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 81.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 13.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 224.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 200.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 116.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 148.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aodffnarx1 : ENTITY IS TRUE;
END aodffnarx1;

ARCHITECTURE behavioral OF aodffnarx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /AODFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /AODFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /AODFFNARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /AODFFNARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aodffnarx2.vhd
-- Description  : DFF with falling edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aodffnarx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (191.193200 ps, 210.878250 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (329.499900 ps, 301.785610 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (236.070290 ps, 1.000000 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 77.564223 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 25.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 80.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 14.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 219.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 224.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 115.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 152.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aodffnarx2 : ENTITY IS TRUE;
END aodffnarx2;

ARCHITECTURE behavioral OF aodffnarx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /AODFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /AODFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /AODFFNARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /AODFFNARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi21x1.vhd
-- Description  : 2 wide 2-1 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi21x1 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (115.710930 ps, 107.854650 ps);
  tpd_in2_qn        : VitalDelayType01 := (123.089030 ps, 109.959020 ps);
  tpd_in3_qn        : VitalDelayType01 := (100.499860 ps, 71.283708 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi21x1 : ENTITY IS TRUE;
END aoi21x1;

ARCHITECTURE behavioral OF aoi21x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in1_ipd, in2_ipd );
qn_zd := VitalNOR2( g1_t, in3_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi21x2.vhd
-- Description  : 2 wide 2-1 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi21x2 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (123.969810 ps, 116.239510 ps);
  tpd_in2_qn        : VitalDelayType01 := (130.429100 ps, 117.508860 ps);
  tpd_in3_qn        : VitalDelayType01 := (107.233270 ps, 77.864319 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi21x2 : ENTITY IS TRUE;
END aoi21x2;

ARCHITECTURE behavioral OF aoi21x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in1_ipd, in2_ipd );
qn_zd := VitalNOR2( g1_t, in3_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi221x1.vhd
-- Description  : 3 wide 2-2-1 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi221x1 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (204.806830 ps, 159.237240 ps);
  tpd_in2_qn         : VitalDelayType01 := (213.737560 ps, 161.217500 ps);
  tpd_in3_qn         : VitalDelayType01 := (184.654390 ps, 141.072470 ps);
  tpd_in4_qn         : VitalDelayType01 := (196.424710 ps, 146.449680 ps);
  tpd_in5_qn         : VitalDelayType01 := (143.044840 ps, 100.717100 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi221x1 : ENTITY IS TRUE;
END aoi221x1;

ARCHITECTURE behavioral OF aoi221x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in3_ipd, in4_ipd );
qn_zd := VitalNOR3( g1_t, g2_t, in5_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi221x2.vhd
-- Description  : 3 wide 2-2-1 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi221x2 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (211.754820 ps, 167.464380 ps);
  tpd_in2_qn         : VitalDelayType01 := (220.869190 ps, 168.879500 ps);
  tpd_in3_qn         : VitalDelayType01 := (192.393960 ps, 149.059960 ps);
  tpd_in4_qn         : VitalDelayType01 := (202.442870 ps, 153.221380 ps);
  tpd_in5_qn         : VitalDelayType01 := (148.767240 ps, 105.279970 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi221x2 : ENTITY IS TRUE;
END aoi221x2;

ARCHITECTURE behavioral OF aoi221x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in3_ipd, in4_ipd );
qn_zd := VitalNOR3( g1_t, g2_t, in5_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi222x1.vhd
-- Description  : 3 wide 2-2-2 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi222x1 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (216.526900 ps, 155.733500 ps);
  tpd_in2_qn         : VitalDelayType01 := (231.724680 ps, 159.923780 ps);
  tpd_in3_qn         : VitalDelayType01 := (199.893000 ps, 140.681810 ps);
  tpd_in4_qn         : VitalDelayType01 := (211.433150 ps, 145.082950 ps);
  tpd_in5_qn         : VitalDelayType01 := (138.949360 ps, 100.638720 ps);
  tpd_in6_qn         : VitalDelayType01 := (148.005760 ps, 104.468810 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi222x1 : ENTITY IS TRUE;
END aoi222x1;

ARCHITECTURE behavioral OF aoi222x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
g3_t := VitalAND2( in6_ipd, in5_ipd );
qn_zd := VitalNOR3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi222x2.vhd
-- Description  : 3 wide 2-2-2 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi222x2 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (237.159770 ps, 173.707760 ps);
  tpd_in2_qn         : VitalDelayType01 := (248.715390 ps, 175.696440 ps);
  tpd_in3_qn         : VitalDelayType01 := (216.720240 ps, 155.642760 ps);
  tpd_in4_qn         : VitalDelayType01 := (225.426310 ps, 157.894760 ps);
  tpd_in5_qn         : VitalDelayType01 := (152.989440 ps, 113.656250 ps);
  tpd_in6_qn         : VitalDelayType01 := (162.004230 ps, 117.220700 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi222x2 : ENTITY IS TRUE;
END aoi222x2;

ARCHITECTURE behavioral OF aoi222x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
g3_t := VitalAND2( in6_ipd, in5_ipd );
qn_zd := VitalNOR3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi22x1.vhd
-- Description  : 2 wide 2-2 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi22x1 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (159.286070 ps, 127.865990 ps);
  tpd_in2_qn        : VitalDelayType01 := (169.419280 ps, 129.552210 ps);
  tpd_in3_qn        : VitalDelayType01 := (136.615620 ps, 111.083990 ps);
  tpd_in4_qn        : VitalDelayType01 := (146.348750 ps, 116.216150 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi22x1 : ENTITY IS TRUE;
END aoi22x1;

ARCHITECTURE behavioral OF aoi22x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
qn_zd := VitalNOR2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoi22x2.vhd
-- Description  : 2 wide 2-2 AND-OR-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoi22x2 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (176.340100 ps, 147.498220 ps);
  tpd_in2_qn        : VitalDelayType01 := (187.087380 ps, 149.629120 ps);
  tpd_in3_qn        : VitalDelayType01 := (152.666340 ps, 129.448040 ps);
  tpd_in4_qn        : VitalDelayType01 := (162.869600 ps, 135.011530 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoi22x2 : ENTITY IS TRUE;
END aoi22x2;

ARCHITECTURE behavioral OF aoi22x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalAND2( in2_ipd, in1_ipd );
g2_t := VitalAND2( in4_ipd, in3_ipd );
qn_zd := VitalNOR2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoinvx1.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoinvx1 IS
 GENERIC
 (
  tpd_inpp_qn       : VitalDelayType01 := (11.595925 ps, 12.331430 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoinvx1 : ENTITY IS TRUE;
END aoinvx1;

ARCHITECTURE behavioral OF aoinvx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoinvx2.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoinvx2 IS
 GENERIC
 (
  tpd_inpp_qn       : VitalDelayType01 := (9.915553 ps, 10.088233 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoinvx2 : ENTITY IS TRUE;
END aoinvx2;

ARCHITECTURE behavioral OF aoinvx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : aoinvx4.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY aoinvx4 IS
 GENERIC
 (
  tpd_inpp_qn       : VitalDelayType01 := (8.938450 ps, 9.089259 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF aoinvx4 : ENTITY IS TRUE;
END aoinvx4;

ARCHITECTURE behavioral OF aoinvx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglnprx2.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglnprx2 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (160.961093 ps, 146.707756 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 12.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 206.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 9.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 202.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 818.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 164.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglnprx2 : ENTITY IS TRUE;
END cglnprx2;

ARCHITECTURE behavioral OF cglnprx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLNPRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglnprx8.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglnprx8 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (201.318125 ps, 192.100922 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 10.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 210.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 6.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 202.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 998.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 211.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglnprx8 : ENTITY IS TRUE;
END cglnprx8;

ARCHITECTURE behavioral OF cglnprx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPRX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPRX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLNPRX8",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglnpsx16.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglnpsx16 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (241.745985 ps, 203.178119 ps);
  tpd_se_gclk_clk_eq_0  : VitalDelayType01 := (303.992198 ps, 145.207316 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 9.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 80.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 2349.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 1201.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 222.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglnpsx16 : ENTITY IS TRUE;
END cglnpsx16;

ARCHITECTURE behavioral OF cglnpsx16 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX16",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX16",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLNPSX16",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk_clk_eq_0),(To_X01(clk_dly)='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglnpsx2.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglnpsx2 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (170.270780 ps, 156.577116 ps);
  tpd_se_gclk_clk_eq_0  : VitalDelayType01 := (188.813730 ps, 78.393439 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 64.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 2305.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 14.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 844.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 174.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglnpsx2 : ENTITY IS TRUE;
END cglnpsx2;

ARCHITECTURE behavioral OF cglnpsx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLNPSX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk_clk_eq_0),(To_X01(clk_dly)='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglnpsx4.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglnpsx4 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (200.112805 ps, 185.987559 ps);
  tpd_se_gclk_clk_eq_0  : VitalDelayType01 := (220.666731 ps, 105.540804 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 64.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 2182.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 17.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 985.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 205.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglnpsx4 : ENTITY IS TRUE;
END cglnpsx4;

ARCHITECTURE behavioral OF cglnpsx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX4",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX4",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLNPSX4",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk_clk_eq_0),(To_X01(clk_dly)='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglnpsx8.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglnpsx8 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (254.498469 ps, 238.588473 ps);
  tpd_se_gclk_clk_eq_0  : VitalDelayType01 := (276.080461 ps, 169.125748 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 65.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 2358.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 12.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 1234.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 298.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglnpsx8 : ENTITY IS TRUE;
END cglnpsx8;

ARCHITECTURE behavioral OF cglnpsx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLNPSX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLNPSX8",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk_clk_eq_0),(To_X01(clk_dly)='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglpprx2.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglpprx2 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (161.213653 ps, 161.569666 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 808.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 179.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglpprx2 : ENTITY IS TRUE;
END cglpprx2;

ARCHITECTURE behavioral OF cglpprx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLPPRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglpprx8.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglpprx8 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (184.163118 ps, 181.137195 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 917.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 199.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglpprx8 : ENTITY IS TRUE;
END cglpprx8;

ARCHITECTURE behavioral OF cglpprx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPRX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPRX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLPPRX8",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglppsx16.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglppsx16 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (206.907480 ps, 202.832757 ps);
  tpd_se_gclk           : VitalDelayType01 := (184.535016 ps, 225.513444 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 832.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 8.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 1025.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 220.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglppsx16 : ENTITY IS TRUE;
END cglppsx16;

ARCHITECTURE behavioral OF cglppsx16 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX16",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX16",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLPPSX16",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglppsx2.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglppsx2 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (160.154654 ps, 158.562989 ps);
  tpd_se_gclk           : VitalDelayType01 := (135.177333 ps, 167.650104 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 791.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 9.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 805.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 176.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglppsx2 : ENTITY IS TRUE;
END cglppsx2;

ARCHITECTURE behavioral OF cglppsx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLPPSX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglppsx4.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglppsx4 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (191.725664 ps, 181.963621 ps);
  tpd_se_gclk           : VitalDelayType01 := (163.092847 ps, 208.054540 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 820.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 34.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 961.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 216.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglppsx4 : ENTITY IS TRUE;
END cglppsx4;

ARCHITECTURE behavioral OF cglppsx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX4",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX4",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLPPSX4",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : cglppsx8.vhd
-- Description  : UNKNOWN
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY cglppsx8 IS
 GENERIC
 (
  tpd_clk_gclk          : VitalDelayType01 := (178.759652 ps, 180.044020 ps);
  tpd_se_gclk           : VitalDelayType01 := (157.245802 ps, 195.732642 ps);
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 806.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 13.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_en_clk_en_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_en_clk_en_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 888.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 197.000000 ps;
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_en       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_en_clk   : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  se         : IN         std_logic;
  en         : IN         std_logic;
  clk        : IN         std_logic;
  gclk       : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF cglppsx8 : ENTITY IS TRUE;
END cglppsx8;

ARCHITECTURE behavioral OF cglppsx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL se_ipd          : std_logic :='X';
SIGNAL en_ipd          : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL en_dly          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( en_ipd, en, tipd_en );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( en_dly, en_ipd, tisd_en_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (se_dly,en_dly,clk_dly)
VARIABLE gclk_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS gclk_zd : std_logic IS Res(0);
ALIAS iq_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 8) := (
-- se  clk  en  violation  gclk  iq  gclk  iq
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '-',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '1',  '1',  '-',  '-',  '-',  '1',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '0',  'S'),
 (  '0',  '0',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '0',  '0',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '-',  '1',  'X',  '-',  '-',  '-',  '1',  'X'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  'X',  'S'),
 (  '0',  'X',  '0',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'X',  'S'),
 (  '0',  'X',  '1',  '-',  '-',  '0',  '1',  'X'),
 (  '0',  'X',  '1',  '-',  '-',  '1',  'X',  '1'),
 (  'X',  '0',  '-',  '-',  '-',  '0',  'X',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '1',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_en_clk  : std_ulogic := '0';
VARIABLE tsuh_en_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => en_dly,
  TestSignalName => "en",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_en_clk_en_eq_1_noedge_negedge,
  SetupLow      => tsetup_en_clk_en_eq_0_noedge_negedge,
  HoldHigh      => thold_en_clk_en_eq_1_noedge_negedge,
  HoldLow       => thold_en_clk_en_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /CGLPPSX8",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_en_clk,
  Violation     => suh_en_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /CGLPPSX8",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_se_clk OR suh_en_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (se_dly,clk_dly,en_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (gclk, gclk_GlitchData, "gclk", gclk_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_gclk),TRUE),
 1=>(se_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_se_gclk),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dec24x1.vhd
-- Description  : 2 to 4 DECODER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dec24x1 IS
 GENERIC
 (
  tpd_in1_q2        : VitalDelayType01 := (59.198657 ps, 62.755119 ps);
  tpd_in1_q0        : VitalDelayType01 := (94.234964 ps, 93.655358 ps);
  tpd_in1_q3        : VitalDelayType01 := (57.008728 ps, 60.242864 ps);
  tpd_in1_q1        : VitalDelayType01 := (92.369967 ps, 92.325016 ps);
  tpd_in2_q1        : VitalDelayType01 := (52.123114 ps, 55.460242 ps);
  tpd_in2_q0        : VitalDelayType01 := (102.055720 ps, 95.758280 ps);
  tpd_in2_q3        : VitalDelayType01 := (53.062708 ps, 56.238283 ps);
  tpd_in2_q2        : VitalDelayType01 := (104.459440 ps, 97.800396 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q0         : OUT        std_logic;
  q1         : OUT        std_logic;
  q2         : OUT        std_logic;
  q3         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dec24x1 : ENTITY IS TRUE;
END dec24x1;

ARCHITECTURE behavioral OF dec24x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q0_GlitchData : VitalGlitchDataType;
VARIABLE q1_GlitchData : VitalGlitchDataType;
VARIABLE q2_GlitchData : VitalGlitchDataType;
VARIABLE q3_GlitchData : VitalGlitchDataType;
VARIABLE Out_t : std_logic_vector(3 downto 0);
ALIAS q0_zd : std_ulogic IS Out_t(0);
ALIAS q2_zd : std_ulogic IS Out_t(1);
ALIAS q1_zd : std_ulogic IS Out_t(2);
ALIAS q3_zd : std_ulogic IS Out_t(3);

BEGIN

Out_t := VitalDecoder(	Data => (in2_ipd,in1_ipd),
				Enable => '1' );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q0, q0_GlitchData, "q0", q0_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q0),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q0),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (q1, q1_GlitchData, "q1", q1_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q1),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q1),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (q2, q2_GlitchData, "q2", q2_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q2),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q2),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (q3, q3_GlitchData, "q3", q3_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q3),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q3),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dec24x2.vhd
-- Description  : 2 to 4 DECODER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dec24x2 IS
 GENERIC
 (
  tpd_in1_q2        : VitalDelayType01 := (69.166642 ps, 72.969698 ps);
  tpd_in1_q0        : VitalDelayType01 := (94.260082 ps, 105.898240 ps);
  tpd_in1_q3        : VitalDelayType01 := (69.111929 ps, 73.598911 ps);
  tpd_in1_q1        : VitalDelayType01 := (95.978145 ps, 107.728220 ps);
  tpd_in2_q1        : VitalDelayType01 := (62.680037 ps, 67.579147 ps);
  tpd_in2_q0        : VitalDelayType01 := (100.003560 ps, 108.031390 ps);
  tpd_in2_q3        : VitalDelayType01 := (65.118647 ps, 70.145344 ps);
  tpd_in2_q2        : VitalDelayType01 := (103.026560 ps, 110.608600 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q0         : OUT        std_logic;
  q1         : OUT        std_logic;
  q2         : OUT        std_logic;
  q3         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dec24x2 : ENTITY IS TRUE;
END dec24x2;

ARCHITECTURE behavioral OF dec24x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q0_GlitchData : VitalGlitchDataType;
VARIABLE q1_GlitchData : VitalGlitchDataType;
VARIABLE q2_GlitchData : VitalGlitchDataType;
VARIABLE q3_GlitchData : VitalGlitchDataType;
VARIABLE Out_t : std_logic_vector(3 downto 0);
ALIAS q0_zd : std_ulogic IS Out_t(0);
ALIAS q2_zd : std_ulogic IS Out_t(1);
ALIAS q1_zd : std_ulogic IS Out_t(2);
ALIAS q3_zd : std_ulogic IS Out_t(3);

BEGIN

Out_t := VitalDecoder(	Data => (in2_ipd,in1_ipd),
				Enable => '1' );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q0, q0_GlitchData, "q0", q0_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q0),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q0),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (q1, q1_GlitchData, "q1", q1_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q1),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q1),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (q2, q2_GlitchData, "q2", q2_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q2),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q2),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (q3, q3_GlitchData, "q3", q3_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q3),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q3),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : delln1x2.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY delln1x2 IS
 GENERIC
 (
  tpd_inpp_q         : VitalDelayType01 := (237.981340 ps, 252.382710 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF delln1x2 : ENTITY IS TRUE;
END delln1x2;

ARCHITECTURE behavioral OF delln1x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : delln2x2.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY delln2x2 IS
 GENERIC
 (
  tpd_inpp_q         : VitalDelayType01 := (484.246430 ps, 542.306750 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF delln2x2 : ENTITY IS TRUE;
END delln2x2;

ARCHITECTURE behavioral OF delln2x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : delln3x2.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY delln3x2 IS
 GENERIC
 (
  tpd_inpp_q         : VitalDelayType01 := (719.069260 ps, 742.781810 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF delln3x2 : ENTITY IS TRUE;
END delln3x2;

ARCHITECTURE behavioral OF delln3x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffarx1.vhd
-- Description  : DFF with rising edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffarx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (159.300440 ps, 136.278040 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (207.425840 ps, 230.568550 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 60.072637 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (214.398250 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 105.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 74.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 139.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 110.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 182.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 105.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffarx1 : ENTITY IS TRUE;
END dffarx1;

ARCHITECTURE behavioral OF dffarx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffarx2.vhd
-- Description  : DFF with rising edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffarx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (165.465160 ps, 156.181430 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (263.521040 ps, 270.360580 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 75.053756 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (226.277790 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 103.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 77.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 134.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 128.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 183.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 136.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffarx2 : ENTITY IS TRUE;
END dffarx2;

ARCHITECTURE behavioral OF dffarx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffasrx1.vhd
-- Description  : DFF with rising edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffasrx1 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (66.382680 ps, 60.279330 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (190.560400 ps, 179.126680 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (254.851520 ps, 269.146790 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (256.426040 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (149.940310 ps, 186.544320 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (270.595610 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 85.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 106.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 144.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 134.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 194.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 242.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 114.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffasrx1 : ENTITY IS TRUE;
END dffasrx1;

ARCHITECTURE behavioral OF dffasrx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 17, 1 TO 9) := (
-- rstb  setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  '1',  'X',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffasrx2.vhd
-- Description  : DFF with rising edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffasrx2 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (76.372155 ps, 69.849453 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (200.496350 ps, 196.795850 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (310.165550 ps, 312.210060 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (274.123310 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (163.273490 ps, 228.458040 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (359.312510 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 97.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 87.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 101.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 141.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 160.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 198.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 326.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 146.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffasrx2 : ENTITY IS TRUE;
END dffasrx2;

ARCHITECTURE behavioral OF dffasrx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 17, 1 TO 9) := (
-- rstb  setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  '1',  'X',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffasx1.vhd
-- Description  : DFF with rising edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffasx1 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (181.715330 ps, 176.885710 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (242.217980 ps, 244.658920 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 204.002300 ps);
  tpd_setb_q                         : VitalDelayType01 := (269.679100 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 106.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 63.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 69.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 126.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 165.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 242.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffasx1 : ENTITY IS TRUE;
END dffasx1;

ARCHITECTURE behavioral OF dffasx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(d_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffasx2.vhd
-- Description  : DFF with rising edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffasx2 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (184.313150 ps, 194.907930 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (296.074660 ps, 300.128470 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 232.342130 ps);
  tpd_setb_q                         : VitalDelayType01 := (345.417960 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 105.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 69.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 60.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 153.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 175.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 315.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffasx2 : ENTITY IS TRUE;
END dffasx2;

ARCHITECTURE behavioral OF dffasx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(d_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnarx1.vhd
-- Description  : DFF with falling edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnarx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (174.213400 ps, 190.520190 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (253.912860 ps, 250.590070 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (221.289070 ps, 1.000000 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 69.186137 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 4.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 84.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 16.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 247.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 181.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 117.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 146.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnarx1 : ENTITY IS TRUE;
END dffnarx1;

ARCHITECTURE behavioral OF dffnarx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnarx2.vhd
-- Description  : DFF with falling edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnarx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (186.287640 ps, 204.056860 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (296.428670 ps, 311.884670 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (230.866370 ps, 1.000000 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 93.415813 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 2.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 64.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 20.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 247.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 218.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 95.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 158.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnarx2 : ENTITY IS TRUE;
END dffnarx2;

ARCHITECTURE behavioral OF dffnarx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasrnx1.vhd
-- Description  : DFF with falling edge clock,low clear,low preset,qb output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasrnx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (221.227050 ps, 243.002090 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (251.369650 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (151.676230 ps, 167.750160 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 8.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 79.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 20.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 93.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 241.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 207.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 117.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 163.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 147.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasrnx1 : ENTITY IS TRUE;
END dffnasrnx1;

ARCHITECTURE behavioral OF dffnasrnx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 14, 1 TO 7) := (
-- setb  rstb  clk  d  violation  qn  qn
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '\',  '0',  '-',  '-',  '1'),
 (  '1',  '1',  '\',  '1',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '\',  '0',  '-',  '-',  '1'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '\',  '1',  '-',  '-',  '0'),
 (  'X',  '1',  '1',  '-',  '-',  '0',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASRNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASRNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNASRNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasrnx2.vhd
-- Description  : DFF with falling edge clock,low clear,low preset,qb output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasrnx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (224.768850 ps, 232.821500 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (276.365000 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (165.463530 ps, 231.595990 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 17.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 55.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 20.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 90.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 249.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 220.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 98.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 166.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 165.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasrnx2 : ENTITY IS TRUE;
END dffnasrnx2;

ARCHITECTURE behavioral OF dffnasrnx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 14, 1 TO 7) := (
-- setb  rstb  clk  d  violation  qn  qn
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '\',  '0',  '-',  '-',  '1'),
 (  '1',  '1',  '\',  '1',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '\',  '0',  '-',  '-',  '1'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '\',  '1',  '-',  '-',  '0'),
 (  'X',  '1',  '1',  '-',  '-',  '0',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASRNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASRNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNASRNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasrqx1.vhd
-- Description  : DFF with falling edge clock,low preset,low clear,q output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasrqx1 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (60.562997 ps, 69.227467 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (271.699040 ps, 284.759920 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (201.379320 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 6.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 79.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 18.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 93.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 246.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 198.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 113.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 146.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 149.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasrqx1 : ENTITY IS TRUE;
END dffnasrqx1;

ARCHITECTURE behavioral OF dffnasrqx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS q_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 14, 1 TO 7) := (
-- rstb  setb  clk  d  violation  q  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '\',  '0',  '-',  '-',  '0'),
 (  '1',  '1',  '\',  '1',  '-',  '-',  '1'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '\',  '1',  '-',  '-',  '1'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '\',  '0',  '-',  '-',  '0'),
 (  'X',  '1',  '1',  '-',  '-',  '0',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRQX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRQX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRQX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASRQX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASRQX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNASRQX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasrqx2.vhd
-- Description  : DFF with falling edge clock,low preset,low clear,q output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasrqx2 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (71.699630 ps, 68.833386 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (273.003920 ps, 259.955190 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (208.473020 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 16.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 86.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 18.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 90.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 251.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 185.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 122.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 155.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 143.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasrqx2 : ENTITY IS TRUE;
END dffnasrqx2;

ARCHITECTURE behavioral OF dffnasrqx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS q_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 14, 1 TO 7) := (
-- rstb  setb  clk  d  violation  q  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '\',  '0',  '-',  '-',  '0'),
 (  '1',  '1',  '\',  '1',  '-',  '-',  '1'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '\',  '1',  '-',  '-',  '1'),
 (  '1',  'X',  '1',  '-',  '-',  '1',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '\',  '0',  '-',  '-',  '0'),
 (  'X',  '1',  '1',  '-',  '-',  '0',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRQX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRQX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRQX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASRQX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASRQX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNASRQX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasrx1.vhd
-- Description  : DFF with falling edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasrx1 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (57.071051 ps, 63.691063 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (182.263540 ps, 202.724430 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (268.718470 ps, 277.223210 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (211.501040 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (125.193610 ps, 137.691070 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (207.449850 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 52.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 28.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 75.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 196.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 202.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 91.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 148.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 137.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasrx1 : ENTITY IS TRUE;
END dffnasrx1;

ARCHITECTURE behavioral OF dffnasrx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 17, 1 TO 9) := (
-- rstb  setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  '1',  'X',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '1',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasrx2.vhd
-- Description  : DFF with falling edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasrx2 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (74.093634 ps, 70.872451 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (216.794080 ps, 237.622640 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (345.245170 ps, 331.597980 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (269.229240 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (161.996670 ps, 228.992760 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (356.756810 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 18.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 86.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 18.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 85.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 232.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 245.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 129.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 203.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 162.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasrx2 : ENTITY IS TRUE;
END dffnasrx2;

ARCHITECTURE behavioral OF dffnasrx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 17, 1 TO 9) := (
-- rstb  setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  '1',  'X',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '1',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /DFFNASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasx1.vhd
-- Description  : DFF with falling edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasx1 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (216.416310 ps, 232.087600 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (286.668110 ps, 303.155340 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 166.055240 ps);
  tpd_setb_q                         : VitalDelayType01 := (222.169400 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 66.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 27.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 66.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 228.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 90.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 148.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasx1 : ENTITY IS TRUE;
END dffnasx1;

ARCHITECTURE behavioral OF dffnasx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnasx2.vhd
-- Description  : DFF with falling edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnasx2 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (221.171590 ps, 237.333470 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (332.385150 ps, 345.944850 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 185.007160 ps);
  tpd_setb_q                         : VitalDelayType01 := (275.951230 ps, 1.000000 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 9.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 69.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 26.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 61.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 258.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 91.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 186.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnasx2 : ENTITY IS TRUE;
END dffnasx2;

ARCHITECTURE behavioral OF dffnasx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /DFFNASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnx1.vhd
-- Description  : DFF with falling edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnx1 IS
 GENERIC
 (
  tpd_clk_qn           : VitalDelayType01 := (175.453070 ps, 188.423080 ps);
  tpd_clk_q            : VitalDelayType01 := (238.924970 ps, 244.936050 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 41.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 20.000000 ps;
  tpw_clk_negedge      : VitalDelayType := 183.000000 ps;
  tpw_clk_posedge      : VitalDelayType := 82.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnx1 : ENTITY IS TRUE;
END dffnx1;

ARCHITECTURE behavioral OF dffnx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 2);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 6, 1 TO 7) := (
-- clk  d  violation  qn  q  qn  q
 (  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  '-',  'B',  'B',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffnx2.vhd
-- Description  : DFF with falling edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffnx2 IS
 GENERIC
 (
  tpd_clk_qn           : VitalDelayType01 := (198.167400 ps, 202.756010 ps);
  tpd_clk_q            : VitalDelayType01 := (280.066720 ps, 298.936170 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 33.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 21.000000 ps;
  tpw_clk_negedge      : VitalDelayType := 227.000000 ps;
  tpw_clk_posedge      : VitalDelayType := 91.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffnx2 : ENTITY IS TRUE;
END dffnx2;

ARCHITECTURE behavioral OF dffnx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 2);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 6, 1 TO 7) := (
-- clk  d  violation  qn  q  qn  q
 (  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  '-',  'B',  'B',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /DFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffssrx1.vhd
-- Description  : BOOL_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffssrx1 IS
 GENERIC
 (
  tpd_clk_qn              : VitalDelayType01 := (134.928250 ps, 127.554050 ps);
  tpd_clk_q               : VitalDelayType01 := (164.302240 ps, 175.119640 ps);
  tsetup_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 122.000000 ps;
  tsetup_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 131.000000 ps;
  tsetup_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 90.000000 ps;
  tsetup_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 102.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 85.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 86.000000 ps;
  thold_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 100.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 156.000000 ps;
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_d_clk    : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  clk        : IN         std_logic;
  d          : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffssrx1 : ENTITY IS TRUE;
END dffssrx1;

ARCHITECTURE behavioral OF dffssrx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (clk_dly,d_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 13, 1 TO 9) := (
-- clk  setb  rstb  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '-',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_setb_clk_setb_eq_1_noedge_posedge,
  SetupLow      => tsetup_setb_clk_setb_eq_0_noedge_posedge,
  HoldHigh      => thold_setb_clk_setb_eq_1_noedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_rstb_clk_rstb_eq_1_noedge_posedge,
  SetupLow      => tsetup_rstb_clk_rstb_eq_0_noedge_posedge,
  HoldHigh      => thold_rstb_clk_rstb_eq_1_noedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFSSRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_setb_clk OR suh_rstb_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,setb_dly,rstb_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffssrx2.vhd
-- Description  : BOOL_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffssrx2 IS
 GENERIC
 (
  tpd_clk_qn              : VitalDelayType01 := (148.330440 ps, 159.938470 ps);
  tpd_clk_q               : VitalDelayType01 := (218.501640 ps, 210.837430 ps);
  tsetup_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 126.000000 ps;
  tsetup_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 128.000000 ps;
  tsetup_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 88.000000 ps;
  tsetup_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 107.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 82.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 90.000000 ps;
  thold_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 148.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 151.000000 ps;
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_d_clk    : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  clk        : IN         std_logic;
  d          : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffssrx2 : ENTITY IS TRUE;
END dffssrx2;

ARCHITECTURE behavioral OF dffssrx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (clk_dly,d_dly,rstb_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 13, 1 TO 9) := (
-- clk  setb  rstb  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '-',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_setb_clk_setb_eq_1_noedge_posedge,
  SetupLow      => tsetup_setb_clk_setb_eq_0_noedge_posedge,
  HoldHigh      => thold_setb_clk_setb_eq_1_noedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_rstb_clk_rstb_eq_1_noedge_posedge,
  SetupLow      => tsetup_rstb_clk_rstb_eq_0_noedge_posedge,
  HoldHigh      => thold_rstb_clk_rstb_eq_1_noedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFSSRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_setb_clk OR suh_rstb_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,setb_dly,rstb_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffx1.vhd
-- Description  : DFF with rising edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffx1 IS
 GENERIC
 (
  tpd_clk_qn           : VitalDelayType01 := (153.197250 ps, 138.388980 ps);
  tpd_clk_q            : VitalDelayType01 := (192.093080 ps, 209.072080 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 65.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 43.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge      : VitalDelayType := 101.000000 ps;
  tpw_clk_negedge      : VitalDelayType := 150.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffx1 : ENTITY IS TRUE;
END dffx1;

ARCHITECTURE behavioral OF dffx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 2);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 6, 1 TO 7) := (
-- clk  d  violation  qn  q  qn  q
 (  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  '-',  'B',  'B',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : dffx2.vhd
-- Description  : DFF with rising edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY dffx2 IS
 GENERIC
 (
  tpd_clk_qn           : VitalDelayType01 := (153.400290 ps, 148.366180 ps);
  tpd_clk_q            : VitalDelayType01 := (235.522390 ps, 251.511200 ps);
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 80.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 55.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge      : VitalDelayType := 116.000000 ps;
  tpw_clk_negedge      : VitalDelayType := 163.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF dffx2 : ENTITY IS TRUE;
END dffx2;

ARCHITECTURE behavioral OF dffx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 2);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 6, 1 TO 7) := (
-- clk  d  violation  qn  q  qn  q
 (  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  '-',  'B',  'B',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /DFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /DFFX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : faddx1.vhd
-- Description  : 1 bit FULL_ADDER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY faddx1 IS
 GENERIC
 (
  tpd_a_s          : VitalDelayType01 := (191.959360 ps, 185.697090 ps);
  tpd_a_co         : VitalDelayType01 := (105.699050 ps, 99.010686 ps);
  tpd_b_s          : VitalDelayType01 := (200.116420 ps, 188.481500 ps);
  tpd_b_co         : VitalDelayType01 := (109.460720 ps, 92.994552 ps);
  tpd_ci_s         : VitalDelayType01 := (196.800570 ps, 173.363850 ps);
  tpd_ci_co        : VitalDelayType01 := (95.590821 ps, 87.210018 ps);
  tipd_a        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_b        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_ci       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  a          : IN         std_logic;
  b          : IN         std_logic;
  ci         : IN         std_logic;
  s          : OUT        std_logic;
  co         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF faddx1 : ENTITY IS TRUE;
END faddx1;

ARCHITECTURE behavioral OF faddx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL a_ipd           : std_logic :='X';
SIGNAL b_ipd           : std_logic :='X';
SIGNAL ci_ipd          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( a_ipd, a, tipd_a );
  VitalWireDelay ( b_ipd, b, tipd_b );
  VitalWireDelay ( ci_ipd, ci, tipd_ci );
END BLOCK;

VITALBehavior : PROCESS (a_ipd,b_ipd,ci_ipd)
VARIABLE s_GlitchData : VitalGlitchDataType;
VARIABLE co_GlitchData : VitalGlitchDataType;
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS s_zd : std_logic IS Res(0);
ALIAS co_zd : std_logic IS Res(1);

CONSTANT TruthTab : VitalTruthTableType (1 TO 14, 1 TO 5) := (
-- ci  b  a    s  co
 (  '0',  '0',  '1',  '1',  '0'),
 (  '0',  '1',  '1',  '0',  '1'),
 (  '0',  '1',  '0',  '1',  '0'),
 (  '1',  '1',  '0',  '0',  '1'),
 (  '1',  '1',  '1',  '1',  '1'),
 (  '1',  '0',  '1',  '0',  '1'),
 (  '1',  '0',  '0',  '1',  '0'),
 (  '0',  '0',  '0',  '0',  '0'),
 (  '0',  '0',  'X',  'X',  '0'),
 (  'X',  '1',  '1',  'X',  '1'),
 (  '0',  'X',  '0',  'X',  '0'),
 (  '1',  '1',  'X',  'X',  '1'),
 (  '1',  'X',  '1',  'X',  '1'),
 (  'X',  '0',  '0',  'X',  '0')
);

BEGIN


Res := VitalTruthTable(TruthTable => TruthTab,
                         DataIn => (ci_ipd,b_ipd,a_ipd)
                    );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (s, s_GlitchData, "s", s_zd,
 Paths=>(0=>(a_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a_s),TRUE),
 1=>(b_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b_s),TRUE),
 2=>(ci_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_ci_s),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (co, co_GlitchData, "co", co_zd,
 Paths=>(0=>(a_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a_co),TRUE),
 1=>(b_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b_co),TRUE),
 2=>(ci_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_ci_co),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : faddx2.vhd
-- Description  : 1 bit FULL_ADDER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY faddx2 IS
 GENERIC
 (
  tpd_a_s          : VitalDelayType01 := (219.071730 ps, 211.608750 ps);
  tpd_a_co         : VitalDelayType01 := (114.837490 ps, 109.591740 ps);
  tpd_b_s          : VitalDelayType01 := (228.051360 ps, 214.316650 ps);
  tpd_b_co         : VitalDelayType01 := (118.681320 ps, 104.005630 ps);
  tpd_ci_s         : VitalDelayType01 := (225.057280 ps, 200.250650 ps);
  tpd_ci_co        : VitalDelayType01 := (105.288490 ps, 98.589333 ps);
  tipd_a        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_b        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_ci       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  a          : IN         std_logic;
  b          : IN         std_logic;
  ci         : IN         std_logic;
  s          : OUT        std_logic;
  co         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF faddx2 : ENTITY IS TRUE;
END faddx2;

ARCHITECTURE behavioral OF faddx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL a_ipd           : std_logic :='X';
SIGNAL b_ipd           : std_logic :='X';
SIGNAL ci_ipd          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( a_ipd, a, tipd_a );
  VitalWireDelay ( b_ipd, b, tipd_b );
  VitalWireDelay ( ci_ipd, ci, tipd_ci );
END BLOCK;

VITALBehavior : PROCESS (a_ipd,b_ipd,ci_ipd)
VARIABLE s_GlitchData : VitalGlitchDataType;
VARIABLE co_GlitchData : VitalGlitchDataType;
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS s_zd : std_logic IS Res(0);
ALIAS co_zd : std_logic IS Res(1);

CONSTANT TruthTab : VitalTruthTableType (1 TO 14, 1 TO 5) := (
-- ci  b  a    s  co
 (  '0',  '0',  '1',  '1',  '0'),
 (  '0',  '1',  '1',  '0',  '1'),
 (  '0',  '1',  '0',  '1',  '0'),
 (  '1',  '1',  '0',  '0',  '1'),
 (  '1',  '1',  '1',  '1',  '1'),
 (  '1',  '0',  '1',  '0',  '1'),
 (  '1',  '0',  '0',  '1',  '0'),
 (  '0',  '0',  '0',  '0',  '0'),
 (  '0',  '0',  'X',  'X',  '0'),
 (  'X',  '1',  '1',  'X',  '1'),
 (  '0',  'X',  '0',  'X',  '0'),
 (  '1',  '1',  'X',  'X',  '1'),
 (  '1',  'X',  '1',  'X',  '1'),
 (  'X',  '0',  '0',  'X',  '0')
);

BEGIN


Res := VitalTruthTable(TruthTable => TruthTab,
                         DataIn => (ci_ipd,b_ipd,a_ipd)
                    );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (s, s_GlitchData, "s", s_zd,
 Paths=>(0=>(a_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a_s),TRUE),
 1=>(b_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b_s),TRUE),
 2=>(ci_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_ci_s),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (co, co_GlitchData, "co", co_zd,
 Paths=>(0=>(a_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a_co),TRUE),
 1=>(b_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b_co),TRUE),
 2=>(ci_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_ci_co),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : haddx1.vhd
-- Description  : 1 bit HALF_ADDER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY haddx1 IS
 GENERIC
 (
  tpd_a0_so        : VitalDelayType01 := (182.991980 ps, 171.910830 ps);
  tpd_a0_c1        : VitalDelayType01 := (91.212603 ps, 106.165630 ps);
  tpd_b0_so        : VitalDelayType01 := (189.720780 ps, 166.647790 ps);
  tpd_b0_c1        : VitalDelayType01 := (85.642629 ps, 99.209251 ps);
  tipd_a0       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_b0       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  a0         : IN         std_logic;
  b0         : IN         std_logic;
  so         : OUT        std_logic;
  c1         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF haddx1 : ENTITY IS TRUE;
END haddx1;

ARCHITECTURE behavioral OF haddx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL a0_ipd          : std_logic :='X';
SIGNAL b0_ipd          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( a0_ipd, a0, tipd_a0 );
  VitalWireDelay ( b0_ipd, b0, tipd_b0 );
END BLOCK;

VITALBehavior : PROCESS (a0_ipd,b0_ipd)
VARIABLE so_GlitchData : VitalGlitchDataType;
VARIABLE c1_GlitchData : VitalGlitchDataType;
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS so_zd : std_logic IS Res(0);
ALIAS c1_zd : std_logic IS Res(1);

CONSTANT TruthTab : VitalTruthTableType (1 TO 6, 1 TO 4) := (
-- b0  a0    so  c1
 (  '0',  '1',  '1',  '0'),
 (  '1',  '1',  '0',  '1'),
 (  '1',  '0',  '1',  '0'),
 (  '0',  '0',  '0',  '0'),
 (  '0',  'X',  'X',  '0'),
 (  'X',  '0',  'X',  '0')
);

BEGIN


Res := VitalTruthTable(TruthTable => TruthTab,
                         DataIn => (b0_ipd,a0_ipd)
                    );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (so, so_GlitchData, "so", so_zd,
 Paths=>(0=>(a0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a0_so),TRUE),
 1=>(b0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b0_so),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (c1, c1_GlitchData, "c1", c1_zd,
 Paths=>(0=>(a0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a0_c1),TRUE),
 1=>(b0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b0_c1),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : haddx2.vhd
-- Description  : 1 bit HALF_ADDER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY haddx2 IS
 GENERIC
 (
  tpd_a0_so        : VitalDelayType01 := (219.362760 ps, 205.600930 ps);
  tpd_a0_c1        : VitalDelayType01 := (101.157670 ps, 120.204930 ps);
  tpd_b0_so        : VitalDelayType01 := (226.176340 ps, 200.455240 ps);
  tpd_b0_c1        : VitalDelayType01 := (95.668729 ps, 113.470290 ps);
  tipd_a0       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_b0       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  a0         : IN         std_logic;
  b0         : IN         std_logic;
  so         : OUT        std_logic;
  c1         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF haddx2 : ENTITY IS TRUE;
END haddx2;

ARCHITECTURE behavioral OF haddx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL a0_ipd          : std_logic :='X';
SIGNAL b0_ipd          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( a0_ipd, a0, tipd_a0 );
  VitalWireDelay ( b0_ipd, b0, tipd_b0 );
END BLOCK;

VITALBehavior : PROCESS (a0_ipd,b0_ipd)
VARIABLE so_GlitchData : VitalGlitchDataType;
VARIABLE c1_GlitchData : VitalGlitchDataType;
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS so_zd : std_logic IS Res(0);
ALIAS c1_zd : std_logic IS Res(1);

CONSTANT TruthTab : VitalTruthTableType (1 TO 6, 1 TO 4) := (
-- b0  a0    so  c1
 (  '0',  '1',  '1',  '0'),
 (  '1',  '1',  '0',  '1'),
 (  '1',  '0',  '1',  '0'),
 (  '0',  '0',  '0',  '0'),
 (  '0',  'X',  'X',  '0'),
 (  'X',  '0',  'X',  '0')
);

BEGIN


Res := VitalTruthTable(TruthTable => TruthTab,
                         DataIn => (b0_ipd,a0_ipd)
                    );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (so, so_GlitchData, "so", so_zd,
 Paths=>(0=>(a0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a0_so),TRUE),
 1=>(b0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b0_so),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (c1, c1_GlitchData, "c1", c1_zd,
 Paths=>(0=>(a0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_a0_c1),TRUE),
 1=>(b0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_b0_c1),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ibuffx16.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ibuffx16 IS
 GENERIC
 (
  tpd_inpp_qn        : VitalDelayType01 := (112.595800 ps, 116.761190 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ibuffx16 : ENTITY IS TRUE;
END ibuffx16;

ARCHITECTURE behavioral OF ibuffx16 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ibuffx2.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ibuffx2 IS
 GENERIC
 (
  tpd_inpp_qn       : VitalDelayType01 := (72.905543 ps, 69.951661 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ibuffx2 : ENTITY IS TRUE;
END ibuffx2;

ARCHITECTURE behavioral OF ibuffx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ibuffx32.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ibuffx32 IS
 GENERIC
 (
  tpd_inpp_qn        : VitalDelayType01 := (160.747480 ps, 171.984160 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ibuffx32 : ENTITY IS TRUE;
END ibuffx32;

ARCHITECTURE behavioral OF ibuffx32 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ibuffx4.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ibuffx4 IS
 GENERIC
 (
  tpd_inpp_qn       : VitalDelayType01 := (77.569612 ps, 77.404628 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ibuffx4 : ENTITY IS TRUE;
END ibuffx4;

ARCHITECTURE behavioral OF ibuffx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : ibuffx8.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY ibuffx8 IS
 GENERIC
 (
  tpd_inpp_qn       : VitalDelayType01 := (99.499712 ps, 102.489180 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF ibuffx8 : ENTITY IS TRUE;
END ibuffx8;

ARCHITECTURE behavioral OF ibuffx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : invx0.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY invx0 IS
 GENERIC
 (
  tpd_inpp_qn     : VitalDelayType01 := (12.873079 ps, 13.228376 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF invx0 : ENTITY IS TRUE;
END invx0;

ARCHITECTURE behavioral OF invx0 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : invx16.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY invx16 IS
 GENERIC
 (
  tpd_inpp_qn      : VitalDelayType01 := (8.351520 ps, 8.469113 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF invx16 : ENTITY IS TRUE;
END invx16;

ARCHITECTURE behavioral OF invx16 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : invx1.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY invx1 IS
 GENERIC
 (
  tpd_inpp_qn     : VitalDelayType01 := (10.516440 ps, 10.806175 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF invx1 : ENTITY IS TRUE;
END invx1;

ARCHITECTURE behavioral OF invx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : invx2.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY invx2 IS
 GENERIC
 (
  tpd_inpp_qn     : VitalDelayType01 := (10.118954 ps, 10.423825 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF invx2 : ENTITY IS TRUE;
END invx2;

ARCHITECTURE behavioral OF invx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : invx32.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY invx32 IS
 GENERIC
 (
  tpd_inpp_qn      : VitalDelayType01 := (8.673816 ps, 8.787185 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF invx32 : ENTITY IS TRUE;
END invx32;

ARCHITECTURE behavioral OF invx32 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : invx4.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY invx4 IS
 GENERIC
 (
  tpd_inpp_qn     : VitalDelayType01 := (8.954156 ps, 9.144701 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF invx4 : ENTITY IS TRUE;
END invx4;

ARCHITECTURE behavioral OF invx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : invx8.vhd
-- Description  : INVERTER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY invx8 IS
 GENERIC
 (
  tpd_inpp_qn     : VitalDelayType01 := (8.457689 ps, 8.610386 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF invx8 : ENTITY IS TRUE;
END invx8;

ARCHITECTURE behavioral OF invx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd := VitalINV( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolandx1.vhd
-- Description  : 2 input AND with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolandx1 IS
 GENERIC
 (
  tpd_d_q             : VitalDelayType01 := (55.382582 ps, 54.199761 ps);
  tpd_iso_q           : VitalDelayType01 := (86.641258 ps, 84.537385 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolandx1 : ENTITY IS TRUE;
END isolandx1;

ARCHITECTURE behavioral OF isolandx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE iso_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

iso_t := VitalINV(iso_ipd);
q_zd := VitalAND2(  iso_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolandx2.vhd
-- Description  : 2 input AND with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolandx2 IS
 GENERIC
 (
  tpd_d_q             : VitalDelayType01 := (68.946143 ps, 65.219618 ps);
  tpd_iso_q           : VitalDelayType01 := (100.234370 ps, 100.842010 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolandx2 : ENTITY IS TRUE;
END isolandx2;

ARCHITECTURE behavioral OF isolandx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE iso_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

iso_t := VitalINV(iso_ipd);
q_zd := VitalAND2(  iso_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolandx4.vhd
-- Description  : 2 input AND with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolandx4 IS
 GENERIC
 (
  tpd_d_q             : VitalDelayType01 := (105.107260 ps, 106.150860 ps);
  tpd_iso_q           : VitalDelayType01 := (135.203090 ps, 142.520100 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolandx4 : ENTITY IS TRUE;
END isolandx4;

ARCHITECTURE behavioral OF isolandx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE iso_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

iso_t := VitalINV(iso_ipd);
q_zd := VitalAND2(  iso_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolandx8.vhd
-- Description  : 2 input AND with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolandx8 IS
 GENERIC
 (
  tpd_d_q             : VitalDelayType01 := (102.273330 ps, 100.419860 ps);
  tpd_iso_q           : VitalDelayType01 := (143.241810 ps, 130.873760 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolandx8 : ENTITY IS TRUE;
END isolandx8;

ARCHITECTURE behavioral OF isolandx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE iso_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

iso_t := VitalINV(iso_ipd);
q_zd := VitalAND2(  iso_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolorx1.vhd
-- Description  : 2 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolorx1 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (47.354877 ps, 49.508921 ps);
  tpd_iso_q          : VitalDelayType01 := (58.646704 ps, 58.048116 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolorx1 : ENTITY IS TRUE;
END isolorx1;

ARCHITECTURE behavioral OF isolorx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR2( iso_ipd, d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolorx2.vhd
-- Description  : 2 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolorx2 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (53.780100 ps, 54.968501 ps);
  tpd_iso_q          : VitalDelayType01 := (65.522509 ps, 62.529472 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolorx2 : ENTITY IS TRUE;
END isolorx2;

ARCHITECTURE behavioral OF isolorx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR2( iso_ipd, d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolorx4.vhd
-- Description  : 2 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolorx4 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (75.884768 ps, 84.060341 ps);
  tpd_iso_q          : VitalDelayType01 := (87.502135 ps, 91.863733 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolorx4 : ENTITY IS TRUE;
END isolorx4;

ARCHITECTURE behavioral OF isolorx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR2( iso_ipd, d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : isolorx8.vhd
-- Description  : 2 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY isolorx8 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (125.069210 ps, 117.584080 ps);
  tpd_iso_q          : VitalDelayType01 := (139.341450 ps, 124.874840 ps);
  tipd_iso      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  iso        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF isolorx8 : ENTITY IS TRUE;
END isolorx8;

ARCHITECTURE behavioral OF isolorx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL iso_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( iso_ipd, iso, tipd_iso );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (iso_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR2( iso_ipd, d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(iso_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_iso_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : larx1.vhd
-- Description  : LATCH with high enable,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY larx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (130.468690 ps, 146.935580 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (223.135870 ps, 212.758510 ps);
  tpd_d_qn_clk_eq_1_an_rstb_eq_1     : VitalDelayType01 := (142.427090 ps, 143.087820 ps);
  tpd_d_q_clk_eq_1_an_rstb_eq_1      : VitalDelayType01 := (219.662940 ps, 225.278780 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (189.294950 ps, 140.695330 ps);
  tpd_rstb_q                         : VitalDelayType01 := (217.468270 ps, 113.817310 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 58.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 90.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 56.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 85.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 154.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF larx1 : ENTITY IS TRUE;
END larx1;

ARCHITECTURE behavioral OF larx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : larx2.vhd
-- Description  : LATCH with high enable,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY larx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (149.460710 ps, 166.917280 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (266.390060 ps, 259.292670 ps);
  tpd_d_qn_clk_eq_1_an_rstb_eq_1     : VitalDelayType01 := (159.800630 ps, 163.162160 ps);
  tpd_d_q_clk_eq_1_an_rstb_eq_1      : VitalDelayType01 := (263.054670 ps, 270.123550 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (237.545290 ps, 160.743150 ps);
  tpd_rstb_q                         : VitalDelayType01 := (260.879810 ps, 137.108830 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 80.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 106.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 78.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 104.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 191.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF larx2 : ENTITY IS TRUE;
END larx2;

ARCHITECTURE behavioral OF larx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- rstb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasrnx1.vhd
-- Description  : LATCH with high enable,low clear,low preset,qb output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasrnx1 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1_an_rstb_eq_1           : VitalDelayType01 := (146.365320 ps, 163.674250 ps);
  tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1 : VitalDelayType01 := (168.273080 ps, 169.421130 ps);
  tpd_rstb_qn_setb_eq_1                       : VitalDelayType01 := (187.345470 ps, 167.480390 ps);
  tpd_setb_qn                                 : VitalDelayType01 := (71.276271 ps, 63.055344 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge          : VitalDelayType := 71.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge          : VitalDelayType := 94.000000 ps;
  trecovery_setb_clk_posedge_negedge          : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge          : VitalDelayType := 69.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge     : VitalDelayType := 26.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge     : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                             : VitalDelayType := 0.000000 ps;
  tpw_setb_negedge                            : VitalDelayType := 113.000000 ps;
  tpw_rstb_negedge                            : VitalDelayType := 137.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  rstb       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasrnx1 : ENTITY IS TRUE;
END lasrnx1;

ARCHITECTURE behavioral OF lasrnx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,rstb_dly)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 13, 1 TO 7) := (
-- setb  rstb  clk  d  violation  qn  qn
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '0',  '-',  '-',  '1'),
 (  '1',  '1',  '1',  '1',  '-',  '-',  '0'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '1',  '0',  '-',  '-',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '1',  '1',  '-',  '-',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '0',  'S'),
 (  '1',  '1',  'X',  '0',  '-',  '1',  'S'),
 (  '1',  '1',  'X',  '1',  '-',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASRNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASRNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LASRNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasrnx2.vhd
-- Description  : LATCH with high enable,low clear,low preset,qb output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasrnx2 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1_an_rstb_eq_1           : VitalDelayType01 := (168.930690 ps, 185.070710 ps);
  tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1 : VitalDelayType01 := (192.022610 ps, 192.903080 ps);
  tpd_rstb_qn_setb_eq_1                       : VitalDelayType01 := (211.275520 ps, 190.700470 ps);
  tpd_setb_qn                                 : VitalDelayType01 := (93.536825 ps, 83.808440 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge          : VitalDelayType := 91.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge          : VitalDelayType := 108.000000 ps;
  trecovery_setb_clk_posedge_negedge          : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge          : VitalDelayType := 89.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge     : VitalDelayType := 10.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge     : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                             : VitalDelayType := 91.000000 ps;
  tpw_setb_negedge                            : VitalDelayType := 139.000000 ps;
  tpw_rstb_negedge                            : VitalDelayType := 146.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  rstb       : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasrnx2 : ENTITY IS TRUE;
END lasrnx2;

ARCHITECTURE behavioral OF lasrnx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,rstb_dly)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 13, 1 TO 7) := (
-- setb  rstb  clk  d  violation  qn  qn
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '0',  '-',  '-',  '1'),
 (  '1',  '1',  '1',  '1',  '-',  '-',  '0'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '1',  '0',  '-',  '-',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '1',  '1',  '-',  '-',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '0',  'S'),
 (  '1',  '1',  'X',  '0',  '-',  '1',  'S'),
 (  '1',  '1',  'X',  '1',  '-',  '0',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASRNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASRNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LASRNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasrqx1.vhd
-- Description  : LATCH with high enable,low preset,low clear,q output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasrqx1 IS
 GENERIC
 (
  tpd_clk_q_setb_eq_1_an_rstb_eq_1           : VitalDelayType01 := (215.516310 ps, 207.689250 ps);
  tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1 : VitalDelayType01 := (221.801570 ps, 230.312580 ps);
  tpd_rstb_q                                 : VitalDelayType01 := (220.116180 ps, 114.602170 ps);
  tpd_setb_q_rstb_eq_1                       : VitalDelayType01 := (137.128120 ps, 134.938870 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge         : VitalDelayType := 59.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge         : VitalDelayType := 87.000000 ps;
  trecovery_setb_clk_posedge_negedge         : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge         : VitalDelayType := 57.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge          : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge          : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge    : VitalDelayType := 30.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge    : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                            : VitalDelayType := 0.000000 ps;
  tpw_setb_negedge                           : VitalDelayType := 106.000000 ps;
  tpw_rstb_negedge                           : VitalDelayType := 151.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasrqx1 : ENTITY IS TRUE;
END lasrqx1;

ARCHITECTURE behavioral OF lasrqx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS q_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 13, 1 TO 7) := (
-- rstb  setb  clk  d  violation  q  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '0',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '1',  '-',  '-',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '1',  '1',  '-',  '-',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '1',  '0',  '-',  '-',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '0',  'S'),
 (  '1',  '1',  'X',  '0',  '-',  '0',  'S'),
 (  '1',  '1',  'X',  '1',  '-',  '1',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRQX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRQX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRQX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASRQX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASRQX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LASRQX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasrqx2.vhd
-- Description  : LATCH with high enable,low preset,low clear,q output
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasrqx2 IS
 GENERIC
 (
  tpd_clk_q_setb_eq_1_an_rstb_eq_1           : VitalDelayType01 := (232.472930 ps, 224.860470 ps);
  tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1 : VitalDelayType01 := (240.046300 ps, 247.953890 ps);
  tpd_rstb_q                                 : VitalDelayType01 := (238.074130 ps, 131.899480 ps);
  tpd_setb_q_rstb_eq_1                       : VitalDelayType01 := (156.076430 ps, 151.378940 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge         : VitalDelayType := 63.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge         : VitalDelayType := 91.000000 ps;
  trecovery_setb_clk_posedge_negedge         : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge         : VitalDelayType := 61.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge          : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge          : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge    : VitalDelayType := 26.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge    : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                            : VitalDelayType := 0.000000 ps;
  tpw_setb_negedge                           : VitalDelayType := 119.000000 ps;
  tpw_rstb_negedge                           : VitalDelayType := 171.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasrqx2 : ENTITY IS TRUE;
END lasrqx2;

ARCHITECTURE behavioral OF lasrqx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 0) := (OTHERS=>'X');
ALIAS q_zd : std_logic IS Res(0);

CONSTANT StateTab : VitalStateTableType (1 TO 13, 1 TO 7) := (
-- rstb  setb  clk  d  violation  q  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '0',  '-',  '-',  '0'),
 (  '1',  '1',  '1',  '1',  '-',  '-',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'S'),
 (  '1',  'X',  '1',  '1',  '-',  '-',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '1',  'S'),
 (  'X',  '1',  '1',  '0',  '-',  '-',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '0',  'S'),
 (  '1',  '1',  'X',  '0',  '-',  '0',  'S'),
 (  '1',  '1',  'X',  '1',  '-',  '1',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRQX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRQX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRQX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASRQX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASRQX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LASRQX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 1,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasrx1.vhd
-- Description  : LATCH with high enable,low clear,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasrx1 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1_an_rstb_eq_1           : VitalDelayType01 := (146.489270 ps, 163.805510 ps);
  tpd_clk_q_setb_eq_1_an_rstb_eq_1            : VitalDelayType01 := (244.252840 ps, 239.290020 ps);
  tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1 : VitalDelayType01 := (168.951760 ps, 169.976120 ps);
  tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1  : VitalDelayType01 := (250.858630 ps, 262.052510 ps);
  tpd_rstb_qn_setb_eq_1                       : VitalDelayType01 := (216.386140 ps, 167.753440 ps);
  tpd_rstb_q                                  : VitalDelayType01 := (248.786150 ps, 115.075080 ps);
  tpd_setb_qn                                 : VitalDelayType01 := (73.113981 ps, 64.511697 ps);
  tpd_setb_q_rstb_eq_1                        : VitalDelayType01 := (163.908270 ps, 164.907950 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge          : VitalDelayType := 81.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge          : VitalDelayType := 102.000000 ps;
  trecovery_setb_clk_posedge_negedge          : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge          : VitalDelayType := 79.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge     : VitalDelayType := 15.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge     : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                             : VitalDelayType := 85.000000 ps;
  tpw_setb_negedge                            : VitalDelayType := 129.000000 ps;
  tpw_rstb_negedge                            : VitalDelayType := 166.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasrx1 : ENTITY IS TRUE;
END lasrx1;

ARCHITECTURE behavioral OF lasrx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 16, 1 TO 9) := (
-- rstb  setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  'X',  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  '1',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  '1',  'X',  '1',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasrx2.vhd
-- Description  : LATCH with high enable,low clear,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasrx2 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1_an_rstb_eq_1           : VitalDelayType01 := (169.359290 ps, 186.662580 ps);
  tpd_clk_q_setb_eq_1_an_rstb_eq_1            : VitalDelayType01 := (296.087830 ps, 294.405780 ps);
  tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1 : VitalDelayType01 := (185.744550 ps, 193.076060 ps);
  tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1  : VitalDelayType01 := (303.015330 ps, 311.040610 ps);
  tpd_rstb_qn_setb_eq_1                       : VitalDelayType01 := (271.289620 ps, 190.955600 ps);
  tpd_rstb_q                                  : VitalDelayType01 := (301.087980 ps, 136.479420 ps);
  tpd_setb_qn                                 : VitalDelayType01 := (94.746567 ps, 84.657210 ps);
  tpd_setb_q_rstb_eq_1                        : VitalDelayType01 := (215.547540 ps, 219.075090 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge          : VitalDelayType := 109.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge          : VitalDelayType := 118.000000 ps;
  trecovery_setb_clk_posedge_negedge          : VitalDelayType := 19.000000 ps;
  trecovery_rstb_clk_posedge_negedge          : VitalDelayType := 107.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge           : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge     : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge     : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge                             : VitalDelayType := 110.000000 ps;
  tpw_setb_negedge                            : VitalDelayType := 169.000000 ps;
  tpw_rstb_negedge                            : VitalDelayType := 208.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  rstb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasrx2 : ENTITY IS TRUE;
END lasrx2;

ARCHITECTURE behavioral OF lasrx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,rstb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 16, 1 TO 9) := (
-- rstb  setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  'X',  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  '1',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  '1',  'X',  '1',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1') and (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(d_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /LASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1_an_rstb_eq_1),(To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_setb_eq_1_an_rstb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0') and (To_X01(rstb_dly)/='0')),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 3=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasx1.vhd
-- Description  : LATCH with high enable,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasx1 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (148.511950 ps, 164.548960 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (215.131150 ps, 221.994150 ps);
  tpd_d_qn_clk_eq_1_an_setb_eq_1     : VitalDelayType01 := (162.842580 ps, 138.601610 ps);
  tpd_d_q_clk_eq_1_an_setb_eq_1      : VitalDelayType01 := (189.267700 ps, 236.696200 ps);
  tpd_setb_qn                        : VitalDelayType01 := (70.856037 ps, 71.903878 ps);
  tpd_setb_q                         : VitalDelayType01 := (135.771570 ps, 143.446660 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 35.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 93.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 19.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 84.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 119.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasx1 : ENTITY IS TRUE;
END lasx1;

ARCHITECTURE behavioral OF lasx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_setb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_setb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lasx2.vhd
-- Description  : LATCH with high enable,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lasx2 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (150.895490 ps, 170.037410 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (240.018830 ps, 247.764130 ps);
  tpd_d_qn_clk_eq_1_an_setb_eq_1     : VitalDelayType01 := (171.626790 ps, 142.954770 ps);
  tpd_d_q_clk_eq_1_an_setb_eq_1      : VitalDelayType01 := (213.157780 ps, 268.896520 ps);
  tpd_setb_qn                        : VitalDelayType01 := (78.478095 ps, 90.156668 ps);
  tpd_setb_q                         : VitalDelayType01 := (175.202030 ps, 174.345420 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 49.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 106.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 1.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 6.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 92.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 152.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lasx2 : ENTITY IS TRUE;
END lasx2;

ARCHITECTURE behavioral OF lasx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 8) := (
-- setb  clk  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(d_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /LASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1_an_setb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1_an_setb_eq_1),(To_X01(clk_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : latchx1.vhd
-- Description  : LATCH with high enable,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY latchx1 IS
 GENERIC
 (
  tpd_clk_qn           : VitalDelayType01 := (143.607010 ps, 158.517740 ps);
  tpd_clk_q            : VitalDelayType01 := (105.807150 ps, 90.477919 ps);
  tpd_d_qn_clk_eq_1    : VitalDelayType01 := (144.703020 ps, 144.833810 ps);
  tpd_d_q_clk_eq_1     : VitalDelayType01 := (91.538254 ps, 89.896956 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 41.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 96.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge      : VitalDelayType := 82.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF latchx1 : ENTITY IS TRUE;
END latchx1;

ARCHITECTURE behavioral OF latchx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 2);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 7, 1 TO 7) := (
-- clk  d  violation  qn  q  qn  q
 (  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LATCHX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LATCHX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1),(To_X01(clk_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1),(To_X01(clk_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : latchx2.vhd
-- Description  : LATCH with high enable,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY latchx2 IS
 GENERIC
 (
  tpd_clk_qn           : VitalDelayType01 := (182.681230 ps, 200.587450 ps);
  tpd_clk_q            : VitalDelayType01 := (122.101110 ps, 109.297180 ps);
  tpd_d_qn_clk_eq_1    : VitalDelayType01 := (180.072990 ps, 188.075440 ps);
  tpd_d_q_clk_eq_1     : VitalDelayType01 := (109.111180 ps, 105.426360 ps);
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 66.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 125.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge      : VitalDelayType := 114.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF latchx2 : ENTITY IS TRUE;
END latchx2;

ARCHITECTURE behavioral OF latchx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 2);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 7, 1 TO 7) := (
-- clk  d  violation  qn  q  qn  q
 (  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  '1',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /LATCHX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /LATCHX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q_clk_eq_1),(To_X01(clk_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE),
 1=>(d_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_d_qn_clk_eq_1),(To_X01(clk_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lnandx1.vhd
-- Description  : BOOLEAN function with 2 inputs and 2 outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lnandx1 IS
 GENERIC
 (
  tpd_rin_qn        : VitalDelayType01 := (32.224266 ps, 28.867735 ps);
  tpd_sin_q         : VitalDelayType01 := (31.851713 ps, 28.516719 ps);
  tpd_sin_qn        : VitalDelayType01 := (1.000000 ps, 70.276266 ps);
  tpd_rin_q         : VitalDelayType01 := (1.000000 ps, 70.397927 ps);
  tipd_sin      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rin      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  sin        : IN         std_logic;
  rin        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lnandx1 : ENTITY IS TRUE;
END lnandx1;

ARCHITECTURE behavioral OF lnandx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL sin_ipd         : std_logic :='X';
SIGNAL rin_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( sin_ipd, sin, tipd_sin );
  VitalWireDelay ( rin_ipd, rin, tipd_rin );
END BLOCK;

VITALBehavior : PROCESS (sin_ipd,rin_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT TruthTab : VitalTruthTableType (1 TO 5, 1 TO 4) := (
-- rin  sin    qn  q
 (  '-',  '1',  '1',  '0'),
 (  '1',  '0',  '0',  '1'),
 (  '0',  '0',  '1',  '1'),
 (  '0',  'X',  '1',  'X'),
 (  'X',  '0',  'X',  '1')
);

BEGIN


Res := VitalTruthTable(TruthTable => TruthTab,
                         DataIn => (rin_ipd,sin_ipd)
                    );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(sin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_sin_q),TRUE),
 1=>(rin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_rin_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(rin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_rin_qn),TRUE),
 1=>(sin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_sin_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lnandx2.vhd
-- Description  : BOOLEAN function with 2 inputs and 2 outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lnandx2 IS
 GENERIC
 (
  tpd_rin_qn        : VitalDelayType01 := (31.453150 ps, 28.544172 ps);
  tpd_sin_q         : VitalDelayType01 := (31.501932 ps, 29.164691 ps);
  tpd_sin_qn        : VitalDelayType01 := (1.000000 ps, 65.292399 ps);
  tpd_rin_q         : VitalDelayType01 := (1.000000 ps, 65.662403 ps);
  tipd_sin      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rin      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  sin        : IN         std_logic;
  rin        : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lnandx2 : ENTITY IS TRUE;
END lnandx2;

ARCHITECTURE behavioral OF lnandx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL sin_ipd         : std_logic :='X';
SIGNAL rin_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( sin_ipd, sin, tipd_sin );
  VitalWireDelay ( rin_ipd, rin, tipd_rin );
END BLOCK;

VITALBehavior : PROCESS (sin_ipd,rin_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT TruthTab : VitalTruthTableType (1 TO 5, 1 TO 4) := (
-- rin  sin    qn  q
 (  '-',  '1',  '1',  '0'),
 (  '1',  '0',  '0',  '1'),
 (  '0',  '0',  '1',  '1'),
 (  '0',  'X',  '1',  'X'),
 (  'X',  '0',  'X',  '1')
);

BEGIN


Res := VitalTruthTable(TruthTable => TruthTab,
                         DataIn => (rin_ipd,sin_ipd)
                    );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(sin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_sin_q),TRUE),
 1=>(rin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_rin_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(rin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_rin_qn),TRUE),
 1=>(sin_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_sin_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnx1.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnx1 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (41.172908 ps, 63.174597 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnx1 : ENTITY IS TRUE;
END lsdnx1;

ARCHITECTURE behavioral OF lsdnx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnx2.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnx2 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (43.966860 ps, 68.962415 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnx2 : ENTITY IS TRUE;
END lsdnx2;

ARCHITECTURE behavioral OF lsdnx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnx4.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnx4 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (57.245530 ps, 93.573811 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnx4 : ENTITY IS TRUE;
END lsdnx4;

ARCHITECTURE behavioral OF lsdnx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnx8.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnx8 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (128.229340 ps, 218.289400 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnx8 : ENTITY IS TRUE;
END lsdnx8;

ARCHITECTURE behavioral OF lsdnx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnenx1.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnenx1 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (40.169493 ps, 65.579911 ps);
  tpd_enb_q          : VitalDelayType01 := (103.958310 ps, 92.652817 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnenx1 : ENTITY IS TRUE;
END lsdnenx1;

ARCHITECTURE behavioral OF lsdnenx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnenx2.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnenx2 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (40.691992 ps, 66.397634 ps);
  tpd_enb_q          : VitalDelayType01 := (104.471500 ps, 93.013164 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnenx2 : ENTITY IS TRUE;
END lsdnenx2;

ARCHITECTURE behavioral OF lsdnenx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnenx4.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnenx4 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (41.352489 ps, 58.962285 ps);
  tpd_enb_q          : VitalDelayType01 := (108.817120 ps, 85.394444 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnenx4 : ENTITY IS TRUE;
END lsdnenx4;

ARCHITECTURE behavioral OF lsdnenx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsdnenx8.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsdnenx8 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (122.734820 ps, 158.322930 ps);
  tpd_enb_q          : VitalDelayType01 := (190.320970 ps, 183.999840 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsdnenx8 : ENTITY IS TRUE;
END lsdnenx8;

ARCHITECTURE behavioral OF lsdnenx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsupenx1.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupenx1 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (177.373850 ps, 306.734990 ps);
  tpd_enb_q          : VitalDelayType01 := (7.408546 ps, 30.777372 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupenx1 : ENTITY IS TRUE;
END lsupenx1;

ARCHITECTURE behavioral OF lsupenx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsupenx2.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupenx2 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (163.127560 ps, 292.148440 ps);
  tpd_enb_q          : VitalDelayType01 := (5.820276 ps, 31.890864 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupenx2 : ENTITY IS TRUE;
END lsupenx2;

ARCHITECTURE behavioral OF lsupenx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsupenx4.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupenx4 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (221.872880 ps, 342.158570 ps);
  tpd_enb_q          : VitalDelayType01 := (9.626357 ps, 26.206857 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupenx4 : ENTITY IS TRUE;
END lsupenx4;

ARCHITECTURE behavioral OF lsupenx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsupenx8.vhd
-- Description  : 2 input OR with 1 inverted input(s)
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2007/08/29 00:39:38 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupenx8 IS
 GENERIC
 (
  tpd_d_q            : VitalDelayType01 := (190.055270 ps, 334.242040 ps);
  tpd_enb_q          : VitalDelayType01 := (5.400540 ps, 30.371029 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  enb        : IN         std_logic;
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupenx8 : ENTITY IS TRUE;
END lsupenx8;

ARCHITECTURE behavioral OF lsupenx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL enb_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (enb_ipd,d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE enb_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

enb_t := VitalINV(enb_ipd);
q_zd := VitalOR2(  enb_t,d_ipd );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE),
 1=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.Vital_Timing.all;
USE IEEE.Vital_Primitives.all;

PACKAGE mtbTablePackage IS
      
        CONSTANT U_FD_N_SD_RB_SB_NO_QN : VitalStateTableType (0 to 31, 0 to 8) :=
        -- UDP Ports: D, CP, TI, TE, RB, SB, NOTIFIER_REG QN QN+1
        (
          ('1', '\','-', '0', '1','1','-',  '-','0'),
          ('0', '\','-', '0', '1','1','-',  '-','1'),
          ('0', '\','-', '0', 'X','1','-',  '-','1'),
          ('1', '\','-', '0', '1','X','-',  '-','0'),

          ('-','-', '-', '-', 'X','1','-',  '1','1'),
          ('-','-', '-', '-', '1','X','-',  '0','0'),

          ('1', 'f','-', '0', '1','1','-',  '0','0'),
          ('0', 'f','-', '0', '1','1','-',  '1','1'),
          ('1', 'v','-', '0', '1','1','-',  '0','0'),
          ('0', 'v','-', '0', '1','1','-',  '1','1'),

          ('-','-', '-', '-', '0','1','-',  '-','1'),
          ('-','-', '-', '-', '-','0','-',  '-','0'),

          ('-', 'P','-', '-', '-','-','-',  '-','S'),
          ('-', 'r','-', '-', '-','-','-',  '-','S'),
          ('*','-', '-', '-', '-','-','-',  '-','S'),

          ('-','-', '-', '-','P','1','-',   '-','S'),
          ('-','-', '-', '-','1','P','-',   '-','S'),

          ('-', '\','0', '1', '1','1','-',  '-','1'),
          ('-', '\','1', '1', '1','1','-',  '-','0'),

          ('-', '\','0', '1', 'X','1','-',  '-','1'),
          ('-', '\','1', '1', '1','X','-',  '-','0'),

          ('-', 'f','1', '1', '1','1','-',  '0','0'),
          ('-', 'f','0', '1', '1','1','-',  '1','1'),
          ('-', 'v','1', '1', '1','1','-',  '0','0'),
          ('-', 'v','0', '1', '1','1','-',  '1','1'),

          ('1', '\','1', 'X', '1','1','-',  '-','0'),
          ('0', '\','0', 'X', '1','1','-',  '-','1'),

          ('1', '\','1', 'X', '1','X','-',  '-','0'),
          ('0', '\','0', 'X', 'X','1','-',  '-','1'),

          ('-','-', '*', '-', '-','-','-',  '-','S'),
          ('-','-', '-', '*', '1','1','-',  '-','S'),
          ('-','-', '-', '-', '-','-','*',  '-','X')
        ); 
 
       
        CONSTANT U_FD_N_SD_RB_SB_QN : VitalStateTableType (0 to 30, 0 to 7) :=
        -- UDP Ports: D CP TI TE RB SB QN QN+1
        (
          ('1', '\','-', '0', '1','1', '-','0'),
          ('0', '\','-', '0', '1','1', '-','1'),

          ('0', '\','-', '0', 'X','1', '-','1'),
          ('1', '\','-', '0', '1','X', '-','0'),

          ('-','-', '-', '-', 'X','1', '1','1'),
          ('-','-', '-', '-', '1','X', '0','0'),

          ('1', 'f','-', '0', '1','1', '0','0'),
          ('0', 'f','-', '0', '1','1', '1','1'),
          ('1', 'v','-', '0', '1','1', '0','0'),
          ('0', 'v','-', '0', '1','1', '1','1'),

          ('-','-', '-', '-', '0','1', '-','1'),
          ('-','-', '-', '-', '-','0', '-','0'),

          ('-', 'P','-', '-', '-','-', '-','S'),
          ('-', 'r','-', '-', '-','-', '-','S'),
          ('*', '-','-', '-', '-','-', '-','S'),

          ('-', '-', '-', '-','P','1', '-','S'),
          ('-','-', '-', '-', '1','P', '-','S'),

          ('-', '\','0', '1', '1','1', '-','1'),
          ('-', '\','1', '1', '1','1', '-','0'),

          ('-', '\','0', '1', 'X','1', '-','1'),
          ('-', '\','1', '1', '1','X', '-','0'),

          ('-', 'f','1', '1', '1','1', '0','0'),
          ('-', 'f','0', '1', '1','1', '1','1'),
          ('-', 'v','1', '1', '1','1', '0','0'),
          ('-', 'v','0', '1', '1','1', '1','1'),

          ('1', '\','1', 'X', '1','1', '-','0'),
          ('0', '\','0', 'X', '1','1', '-','1'),

          ('1', '\','1', 'X', '1','X', '-','0'),
          ('0', '\','0', 'X', 'X','1', '-','1'),

          ('-','-', '*', '-', '-','-', '-','S'),
          ('-','-', '-', '*', '1','1', '-','S')
        );

       
        CONSTANT U_FD_N_SD_RB_SB_NO : VitalStateTableType (0 to 31, 0 to 8) :=
        -- UDP Ports: D CP TI TE RB SB NOTIFIER_REG QN QN+1
        (
          ('1','\','-', '0', '1','1','-',  '-','1'),
          ('0', '\','-', '0', '1','1','-', '-','0'),

          ('0', '\','-', '0', 'X','1','-', '-','0'),
          ('1', '\','-', '0', '1','X','-', '-','1'),

          ('-','-', '-', '-', 'X','1','-', '0','0'),
          ('-','-', '-', '-', '1','X','-', '1','1'),

          ('1', 'f','-', '0', '1','1','-', '1','1'),
          ('0', 'f','-', '0', '1','1','-', '0','0'),
          ('1', 'v','-', '0', '1','1','-', '1','1'),
          ('0', 'v','-', '0', '1','1','-', '0','0'),

          ('-','-', '-', '-', '0','-','-', '-','0'),
          ('-','-', '-', '-', '1','0','-', '-','1'),

          ('-', 'P','-', '-', '-','-','-', '-','S'),
          ('-', 'r','-', '-', '-','-','-', '-','S'),
          ('*','-', '-', '-', '-','-','-', '-','S'),

          ('-','-', '-', '-','P','1','-',  '-','S'),
          ('-','-', '-', '-','1','P','-',  '-','S'),

          ('-', '\','0', '1', '1','1','-', '-','0'),
          ('-', '\','1', '1', '1','1','-', '-','1'),

          ('-', '\','0', '1', 'X','1','-', '-','0'),
          ('-', '\','1', '1', '1','X','-', '-','1'),

          ('-', 'f','1', '1', '1','1','-', '1','1'),
          ('-', 'f','0', '1', '1','1','-', '0','0'),
          ('-', 'v','1', '1', '1','1','-', '1','1'),
          ('-', 'v','0', '1', '1','1','-', '0','0'),

          ('1', '\','1', 'X', '1','1','-', '-','1'),
          ('0', '\','0', 'X', '1','1','-', '-','0'),

          ('1', '\','1', 'X', '1','X','-', '-','1'),
          ('0', '\','0', 'X', 'X','1','-', '-','0'),

          ('-','-', '*', '-', '-','-','-', '-','S'),
          ('-','-', '-', '*', '1','1','-', '-','S'),
          ('-','-', '-', '-', '-','-','*', '-','X')
        );


       CONSTANT U_FD_P_SD_RB_SB_NO_QN : VitalStateTableType (0 to 31, 0 to 8) :=
       -- UDP Ports: D CP TI TE RB SB NOTIFIER_REG QN QN+1
       (
          ('1', '/','-', '0', '1','1','-',  '-','0'),
          ('0', '/','-', '0', '1','1','-',  '-','1'),

          ('0', '/','-', '0', 'X','1','-',  '-','1'),
          ('1', '/','-', '0', '1','X','-',  '-','0'),

          ('-','-', '-', '-', 'X','1','-',  '1','1'),
          ('-','-', '-', '-', '1','X','-',  '0','0'),

          ('1', '^','-', '0', '1','1','-',  '0','0'),
          ('0', '^','-', '0', '1','1','-',  '1','1'),
          ('1', 'r','-', '0', '1','1','-',  '0','0'),
          ('0', 'r','-', '0', '1','1','-',  '1','1'),

          ('-','-', '-', '-', '0','1','-',  '-','1'),
          ('-','-', '-', '-', '-','0','-',  '-','0'),

          ('-', 'N','-', '-', '1','1','-',  '-','S'),
          ('-', 'f','-', '-', '1','1','-',  '-','S'),
          ('*','-', '-', '-', '-','-','-',  '-','S'),

          ('-','-', '-', '-', 'P','1','-',  '-','S'),
          ('-','-', '-', '-', '1', 'P','-', '-','S'),

          ('-', '/','0', '1', '1','1','-',  '-','1'),
          ('-', '/','1', '1', '1','1','-',  '-','0'),

          ('-', '/','0', '1', 'X','1','-',  '-','1'),
          ('-', '/','1', '1', '1','X','-',  '-','0'),

          ('-', '^','1', '1', '1','1','-',  '0','0'),
          ('-', '^','0', '1', '1','1','-',  '1','1'),
          ('-', 'r','1', '1', '1','1','-',  '0','0'),
          ('-', 'r','0', '1', '1','1','-',  '1','1'),

          ('1', '/','1', 'X', '1','1','-',  '-','0'),
          ('0', '/','0', 'X', '1','1','-',  '-','1'),

          ('1', '/','1', 'X', '1','X','-',  '-','0'),
          ('0', '/','0', 'X', 'X','1','-',  '-','1'),

          ('-','-', '*', '-', '-','-','-',  '-','S'),
          ('-','-', '-', '*', '1','1','-',  '-','S'),
          ('-','-', '-', '-', '-','-','*',  '-','X')
        ); 


         
        CONSTANT U_FD_P_SD_RB_SB_QN : VitalStateTableType (0 to 30, 0 to 7) :=
        -- UDP Ports: D CP TI TE RB SB QN QN+1
        (
          ('1', '/','-', '0', '1','1', '-','0'),
          ('0', '/','-', '0', '1','1', '-','1'),

          ('0', '/','-', '0', 'X','1', '-','1'),
          ('1', '/','-', '0', '1','X', '-','0'),

          ('-','-', '-', '-', 'X','1', '1','1'),
          ('-','-', '-', '-', '1','X', '0','0'),

          ('1', '^','-', '0', '1','1', '0','0'),
          ('0', '^','-', '0', '1','1', '1','1'),
          ('1', 'r','-', '0', '1','1', '0','0'),
          ('0', 'r','-', '0', '1','1', '1','1'),

          ('-','-', '-', '-', '0','1', '-','1'),
          ('-','-', '-', '-', '-','0', '-','0'),

          ('-', 'N','-', '-', '1','1', '-','S'),
          ('-', 'f','-', '-', '1','1', '-','S'),
          ('*','-', '-', '-', '-','-', '-','S'),

          ('-','-', '-', '-', 'P','1', '-','S'),
          ('-','-', '-', '-', '1','P', '-','S'),

          ('-', '/','0', '1', '1','1', '-','1'),
          ('-', '/','1', '1', '1','1', '-','0'),

          ('-', '/','0', '1', 'X','1', '-','1'),
          ('-', '/','1', '1', '1','X', '-','0'),

          ('-', '^','1', '1', '1','1', '0','0'),
          ('-', '^','0', '1', '1','1', '1','1'),
          ('-', 'r','1', '1', '1','1', '0','0'),
          ('-', 'r','0', '1', '1','1', '1','1'),

          ('1', '/','1', 'X', '1','1', '-','0'),
          ('0', '/','0', 'X', '1','1', '-','1'),

          ('1', '/','1', 'X', '1','X', '-','0'),
          ('0', '/','0', 'X', 'X','1', '-','1'),

          ('-','-', '*', '-', '-','-', '-','S'),
          ('-','-', '-', '*', '1','1', '-','S')
        );
       
  
       CONSTANT U_FD_P_SD_RB_SB_NO : VitalStateTableType (0 to 31, 0 to 8) :=
       -- UDP Ports: D CP TI TE RB SB NOTIFIER_REG Q Q+1
       (
          ('1', '/','-', '0', '1','1','-',  '-','1'),
          ('0', '/','-', '0', '1','1','-',  '-','0'),

          ('0', '/','-', '0', 'X','1','-',  '-','0'),
          ('1', '/','-', '0', '1','X','-',  '-','1'),

          ('-','-', '-', '-', 'X','1','-',  '0','0'),
          ('-','-', '-', '-', '1','X','-',  '1','1'),

          ('1', '^','-', '0', '1','1','-',  '1','1'),
          ('0', '^','-', '0', '1','1','-',  '0','0'),
          ('1', 'r','-', '0', '1','1','-',  '1','1'),
          ('0', 'r','-', '0', '1','1','-',  '0','0'),

          ('-','-', '-', '-', '0','-','-',  '-','0'),
          ('-','-', '-', '-', '1','0','-',  '-','1'),

          ('-', 'N','-', '-', '1','1','-',  '-','S'),
          ('-', 'f','-', '-', '1','1','-',  '-','S'),
          ('*','-', '-', '-', '-','-','-',  '-','S'),

          ('-', '-', '-', '-','P','1','-',  '-','S'),
          ('-','-', '-', '-', '1','P', '-', '-','S'),

          ('-', '/','0', '1', '1','1','-',  '-','0'),
          ('-', '/','1', '1', '1','1','-',  '-','1'),

          ('-', '/','0', '1', 'X','1','-',  '-','0'),
          ('-', '/','1', '1', '1','X','-',  '-','1'),

          ('-', '^','1', '1', '1','1','-',  '1','1'),
          ('-', '^','0', '1', '1','1','-',  '0','0'),
          ('-', 'r','1', '1', '1','1','-',  '1','1'),
          ('-', 'r','0', '1', '1','1','-',  '0','0'),

          ('1', '/','1', 'X', '1','1','-',  '-','1'),
          ('0', '/','0', 'X', '1','1','-',  '-','0'),

          ('1', '/','1', 'X', '1','X','-',  '-','1'),
          ('0', '/','0', 'X', 'X','1','-',  '-','0'),

          ('-','-', '*', '-', '-','-','-',  '-','S'),
          ('-','-', '-', '*', '1','1','-',  '-','S'),
          ('-','-', '-', '-', '-','-','*',  '-','X')
       );



        CONSTANT U_FJK_N_RB_SB_X_NO : VitalStateTableType (0 to 34, 0 to 7) := 
        -- UDP Ports: J  K  CP RB  SB  NOTIFIER_REG Q Q+1
        (
           ('0', '0','\','1','1', '-', '-', 'S'),

           ('0', '1','\','1','1', '-', '-', '0'),
           ('0', '1','\','X','1', '-', '-', '0'),
           ('-', '-','-','X','1', '-', '0', '0'),

           ('1', '0','\','1','1', '-', '-', '1'),
           ('1', '0','\','1','X', '-', '-', '1'),
           ('-', '-', '-', '1','X','-','1', '1'),

           ('1', '1','\','1','1', '-', '0', '1'),
           ('1', '1','\','1','1', '-', '1', '0'),

           ('-', '1','\','X','1', '-', '1', '0'),
           ('1', '-','\','1','X', '-', '0', '1'),

           ('0', '0','f','1','1', '-', '-', 'S'),
           ('0', '1','f','1','1', '-', '0', '0'),
           ('1', '0','f','1','1', '-', '1', '1'),
           ('0', '0','v','1','1', '-', '-', 'S'),
           ('0', '1','v','1','1', '-', '0', '0'),
           ('1', '0','v','1','1', '-', '1', '1'),

           ('*', '-','-', '1','1', '-','-', 'S'),
           ('-', '*','-', '1','1', '-','-', 'S'),

           ('-', '-', '-', '0','1', '-', '-','0'),
           ('-', '-', '-', '1','0', '-', '-','1'),
           ('-', '-', '-', '0','0', '-', '-','X'),

           ('X', '0', '\','1','1', '-', '1','1'),
           ('X', '1', '\','1','1', '-', '1','0'),
           ('0', 'X', '\','1','1', '-', '0','0'),
           ('1', 'X', '\','1','1', '-', '0','1'),

           ('X', '0','f','1','1', '-', '1', '1'), 
           ('0', 'X','f','1','1', '-', '0', '0'),
           ('X', '0','v','1','1', '-', '1', '1'),
           ('0', 'X','v','1','1', '-', '0', '0'),
  
           ('-', '-','P','-','-', '-', '-', 'S'), 
           ('-', '-','r','-','-', '-', '-', 'S'),
           ('-', '-','-','P','1', '-', '-', 'S'),
           ('-', '-','-','1','P', '-', '-', 'S'), 
           ('-', '-','-','-','-', '*', '-', 'X') 
         );


         CONSTANT U_FJK_P_RB_SB_X_NO : VitalStateTableType (0 to 34, 0 to 7) :=
         -- UDP Ports: J K CP RB SB NOTIFIER_REG Q Q+1
         (
           ('0', '0','/','1','1','-', '-', 'S'),

           ('0', '1','/','1','1','-', '-', '0'),
           ('0', '1','/','X','1','-', '-', '0'),
           ('-', '-','-','X','1','-', '0', '0'),

           ('1', '0','/','1','1','-', '-', '1'),
           ('1', '0','/','1','X','-', '-', '1'),
           ('-', '-','-','1','X','-', '1', '1'),

           ('1', '1','/','1','1','-', '0', '1'),
           ('1', '1','/','1','1','-', '1', '0'),

           ('-', '1','/','X','1','-', '1', '0'),
           ('1', '-','/','1','X','-', '0', '1'),

           ('0', '0','^','1','1','-', '-', 'S'),
           ('0', '1','^','1','1','-', '0', '0'),
           ('1', '0','^','1','1','-', '1', '1'),
           ('0', '0','r','1','1','-', '-', 'S'),
           ('0', '1','r','1','1','-', '0', '0'),
           ('1', '0','r','1','1','-', '1', '1'),

           ('*', '-','-', '1','1','-', '-', 'S'),
           ('-', '*','-', '1','1','-', '-', 'S'),

           ('-', '-', '-', '0','1','-', '-','0'),
           ('-', '-', '-', '1','0','-', '-','1'),
           ('-', '-', '-', '0','0','-', '-','X'),

           ('X', '0', '/', '1','1','-', '1','1'),
           ('X', '1', '/', '1','1','-', '1','0'),
           ('0', 'X', '/', '1','1','-', '0','0'),
           ('1', 'X', '/', '1','1','-', '0','1'),

           ('X', '0','^','1','1','-', '1', '1'),
           ('0', 'X','^','1','1','-', '0', '0'),
           ('X', '0','r','1','1','-', '1', '1'),
           ('0', 'X','r','1','1','-', '0', '0'),

           ('-', '-','N','1','1','-', '-', 'S'),
           ('-', '-','f','1','1','-', '-', 'S'),

           ('-', '-','-','P','1','-', '-', 'S'),
           ('-', '-','-','1','P','-', '-', 'S'),
           ('-', '-','-','-','-','*', '-', 'X')
         );      



        CONSTANT U_FT_N_RB_SB_X_NO : VitalStateTableType (0 to 13, 0 to 5) :=
        -- UDP Ports: CP RB SB NOTIFIER_REG Q Q+1
        (
           ('\','1','1', '-','0','1'),
           ('\','1','1', '-','1','0'),

           ('-','0','1', '-','-','0'),
           ('-','1','0', '-','-','1'),
           ('-','0','0', '-','-','X'),

           ('P', '-','-','-','-','S'),
           ('r', '-','-','-','-','S'),
           ('-','P', '-','-','-','S'),
           ('-','-','P','-','-', 'S'),

           ('\','X','1', '-','1','0'),
           ('\','1','X', '-','0','1'),
           ('-','X','1', '-','0','0'),
           ('-','1','X', '-','1','1'),
           ('-','-','-', '*','-','X')
        );

          
         CONSTANT U_FT_N_TE_RB_SB_NO : VitalStateTableType (0 to 14, 0 to 6) :=
         -- UDP Ports: TE CP RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '\','1','1',  '-','0','1'),
           ('1', '\','1','1',  '-','1','0'),

           ('1','P', '-','-',  '-','-','S'),
           ('1','r', '-','-',  '-','-','S'),

           ('-', '-','P','-',  '-','-','S'),
           ('-', '-', '-', 'P','-','-','S'),
           ('-', '-', '0','1', '-','-','0'),
           ('-', '-', '-','0', '-','-','1'),
           ('1', '\','X','1',  '-','1','0'),
           ('1', '\','1','X',  '-','0','1'),

           ('0', '-','1','1',  '-','-','S'),
           ('-', '-', 'X','1', '-','0','0'),
           ('-', '-', '1','X', '-','1','1'),
           ('*', '-', '-','-',  '-','-','S'),
           ('-', '-', '-','-',  '*','-','X')
         );

       

        CONSTANT U_FT_P_RB_SB_X_NO : VitalStateTableType (0 to 13, 0 to 5) :=
        -- UDP Ports: CP RB SB NOTIFIER_REG Q Q+1
        (
           ('/','1','1','-', '0','1'),
           ('/','1','1','-', '1','0'),

           ('-','0','1','-', '-','0'),
           ('-','1','0','-', '-','1'),
           ('-','0','0','-', '-','X'),

           ('N', '1','1','-','-','S'),
           ('f', '1','1','-','-','S'),
           ('-','P', '-','-','-','S'),
           ('-','-','P','-', '-','S'),

           ('/','X','1','-', '1','0'),
           ('/','1','X','-', '0','1'),
           ('-','X','1','-', '0','0'),
           ('-','1','X','-', '1','1'),
           ('-','-','-','*', '-','X')
        );



         CONSTANT U_FT_P_TE_RB_SB_NO : VitalStateTableType (0 to 14, 0 to 6) :=
         -- UDP Ports: TE CP RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '/','1','1','-', '0','1'),
           ('1', '/','1','1','-', '1','0'),

           ('1','N', '1','1','-', '-','S'),
           ('1','f', '1','1','-', '-','S'),

           ('-', '-','P','-', '-','-','S'),
           ('-', '-', '-','P','-','-','S'),
           ('-', '-','0','-', '-','-','0'),
           ('-', '-', '1','0','-','-','1'),
           ('1', '/','X','1', '-','1','0'),
           ('1', '/','1','X', '-','0','1'),

           ('0', '-','1','1', '-','-','S'),
           ('-', '-','X','1', '-','0','0'),
           ('-', '-', '1','X','-','1','1'),
           ('*', '-','-','-', '-','-','S'),
           ('-', '-', '-','-','*','-','X')
         );



         CONSTANT U_LD_N_RB_SB_X_NO : VitalStateTableType (0 to 15, 0 to 6) :=
         -- UDP Ports: D CK RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '0', '1', '1','-', '-','1'),
           ('0', '0', '1', '1','-', '-','0'),

           ('1', 'X', '1', '1','-', '1','1'),
           ('0', 'X', '1', '1','-', '0','0'),

           ('-', '-', '0', '1','-', '-','0'),
           ('-', '-', '1', '0','-', '-','1'),
           ('-', '-', '0', '0','-', '-','X'),

           ('-', '1', '1', '1','-', '-','S'),

           ('0', '0', 'X', '1','-', '-','0'),
           ('0', '-', 'X', '1','-', '0','0'),
           ('1', '0', '1', 'X','-', '-','1'), 
           ('1', '-', '1', 'X','-', '1','1'),

           ('-', '1', 'X', '1','-', '0','0'),
           ('-', '1', '1', 'X','-', '1','1'),

           ('-', 'R', '1', '1','-', '-','S'),
           ('-', '-', '-', '-','*', '-','X')
         );


         CONSTANT U_LD_N_SB_RB_QN_NO : VitalStateTableType (0 to 15, 0 to 6) :=
         -- UDP Ports: D CK RB SB NOTIFIER_REG QN QN+1
         (
           ('1', '0', '1', '1','-', '-','0'),
           ('0', '0', '1', '1','-', '-','1'),

           ('1', 'X', '1', '1','-', '0','0'),
           ('0', 'X', '1', '1','-', '1','1'),

           ('-', '-', '0', '1','-', '-','1'),
           ('-', '-', '1', '0','-', '-','0'),
           ('-', '-', '0', '0','-', '-','1'),

           ('-', '1', '1', '1','-', '-','S'),

           ('0', '0', 'X', '1','-', '-','1'),
           ('0', '-', 'X', '1','-', '1','1'),
           ('1', '0', '1', 'X','-', '-','0'),
           ('1', '-', '1', 'X','-', '0','0'),

           ('-', '1', 'X', '1','-', '1','1'),
           ('-', '1', '1', 'X','-', '0','0'),

           ('-', 'R', '1', '1','-', '-','S'),
           ('-', '-', '-', '-','*', '-','X')
         );



         CONSTANT U_LD_P_RB_SB_X_NO : VitalStateTableType (0 to 15, 0 to 6) :=
         -- UDP Ports: D CK RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '1', '1', '1','-', '-','1'),
           ('0', '1', '1', '1','-', '-','0'),

           ('1', 'X', '1', '1','-', '1','1'),
           ('0', 'X', '1', '1','-', '0','0'),

           ('-', '-', '0', '1','-', '-','0'),
           ('-', '-', '1', '0','-', '-','1'),
           ('-', '-', '0', '0','-', '-','X'),

           ('-', '0', '1', '1','-', '-','S'),

           ('0', '1', 'X', '1','-', '-','0'),
           ('0', '-', 'X', '1','-', '0','0'),
           ('1', '1', '1', 'X','-', '-','1'),
           ('1', '-', '1', 'X','-', '1','1'),

           ('-', '0', 'X', '1','-', '0','0'),
           ('-', '0', '1', 'X','-', '1','1'),

           ('-', 'F', '1', '1','-', '-','S'),
           ('-', '-', '-', '-','*', '-','X')
         );



          CONSTANT U_LD_P_SB_RB_QN_NO : VitalStateTableType (0 to 15, 0 to 6) :=
          -- UDP Ports: D CK RB SB NOTIFIER_REG QN QN+1
          (
            ('1', '1', '1', '1','-', '-','0'),
            ('0', '1', '1', '1','-', '-','1'),

            ('1', 'X', '1', '1','-', '0','0'),
            ('0', 'X', '1', '1','-', '1','1'),

            ('-', '-', '0', '1','-', '-','1'),
            ('-', '-', '1', '0','-', '-','0'),
            ('-', '-', '0', '0','-', '-','1'),

            ('-', '0', '1', '1','-', '-','S'),

            ('0', '1', 'X', '1','-', '-','1'),
            ('0', '-', 'X', '1','-', '1','1'),
            ('1', '1', '1', 'X','-', '-','0'),
            ('1', '-', '1', 'X','-', '0','0'),

            ('-', '0', 'X', '1','-', '1','1'),
            ('-', '0', '1', 'X','-', '0','0'),

            ('-', 'F', '1', '1','-', '-','S'),
            ('-', '-', '-', '-','*', '-','X')
           );





           CONSTANT U_FJK_N_RB_SB_QN_NO  : VitalStateTableType (0 to 34, 0 to 7) :=
           -- UDP Ports: J K CP RB SB NOTIFIER_REG QN QN+1
           ( 
             ('0', '0','\','1','1', '-','-', 'S'),

             ('0', '1','\','1','1', '-','-', '1'),
             ('0', '1','\','X','1', '-','-', '1'),
             ('-', '-', '-','X','1', '-','1','1'),

             ('1', '0','\','1','1', '-','-', '0'),
             ('1', '0','\','1','X', '-','-', '0'),
             ('-', '-', '-','1','X', '-','0','0'),

             ('1', '1','\','1','1', '-','1', '0'),
             ('1', '1','\','1','1', '-','0', '1'),

             ('-', '1','\','X','1', '-','0', '1'),
             ('1', '-','\','1','X', '-','1', '0'),

             ('0', '0','v','1','1', '-','-', 'S'),
             ('0', '1','v','1','1', '-','1', '1'),
             ('1', '0','v','1','1', '-','0', '0'),
             ('0', '0','f','1','1', '-','-', 'S'),
             ('0', '1','f','1','1', '-','1', '1'),
             ('1', '0','f','1','1', '-','0', '0'),

             ('*', '-', '-','1','1', '-','-','S'),
             ('-', '*', '-','1','1', '-','-','S'),

             ('-', '-', '-','1','0', '-','-','0'),
             ('-', '-', '-','0','1', '-','-','1'),
             ('-', '-', '-','0','0', '-','-','0'),

             ('-', '-','P', '1','1', '-','-','S'),
             ('-', '-','r', '1','1', '-','-','S'),

             ('X', '0','\', '1','1', '-','0','0'),
             ('X', '1','\', '1','1', '-','0','1'),
             ('0', 'X','\', '1','1', '-','1','1'),
             ('1', 'X','\', '1','1', '-','1','0'),

             ('X', '0','v','1','1', '-','0', '0'),
             ('0', 'X','v','1','1', '-','1', '1'),
             ('X', '0','f','1','1', '-','0', '0'),
             ('0', 'X','f','1','1', '-','1', '1'),

             ('-', '-', '-','P', '1','-','-','S'),
             ('-', '-', '-','1', 'P','-','-','S'),
             ('-', '-', '-','-', '-','*','-','X')
          );

		 
END mtbTablePackage;


-- Filename     : lsupx1.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupx1 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (275.722180 ps, 430.064370 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupx1 : ENTITY IS TRUE;
END lsupx1;

ARCHITECTURE behavioral OF lsupx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsupx2.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupx2 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (315.644100 ps, 504.731090 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupx2 : ENTITY IS TRUE;
END lsupx2;

ARCHITECTURE behavioral OF lsupx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsupx4.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupx4 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (397.087030 ps, 657.928560 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupx4 : ENTITY IS TRUE;
END lsupx4;

ARCHITECTURE behavioral OF lsupx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : lsupx8.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY lsupx8 IS
 GENERIC
 (
  tpd_d_q          : VitalDelayType01 := (541.261010 ps, 956.009150 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF lsupx8 : ENTITY IS TRUE;
END lsupx8;

ARCHITECTURE behavioral OF lsupx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
END BLOCK;

VITALBehavior : PROCESS (d_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( d_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(d_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_d_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.Vital_Timing.all;
USE IEEE.Vital_Primitives.all;

PACKAGE mtbTablePackage IS
      
        CONSTANT U_FD_N_SD_RB_SB_NO_QN : VitalStateTableType (0 to 31, 0 to 8) :=
        -- UDP Ports: D, CP, TI, TE, RB, SB, NOTIFIER_REG QN QN+1
        (
          ('1', '\','-', '0', '1','1','-',  '-','0'),
          ('0', '\','-', '0', '1','1','-',  '-','1'),
          ('0', '\','-', '0', 'X','1','-',  '-','1'),
          ('1', '\','-', '0', '1','X','-',  '-','0'),

          ('-','-', '-', '-', 'X','1','-',  '1','1'),
          ('-','-', '-', '-', '1','X','-',  '0','0'),

          ('1', 'f','-', '0', '1','1','-',  '0','0'),
          ('0', 'f','-', '0', '1','1','-',  '1','1'),
          ('1', 'v','-', '0', '1','1','-',  '0','0'),
          ('0', 'v','-', '0', '1','1','-',  '1','1'),

          ('-','-', '-', '-', '0','1','-',  '-','1'),
          ('-','-', '-', '-', '-','0','-',  '-','0'),

          ('-', 'P','-', '-', '-','-','-',  '-','S'),
          ('-', 'r','-', '-', '-','-','-',  '-','S'),
          ('*','-', '-', '-', '-','-','-',  '-','S'),

          ('-','-', '-', '-','P','1','-',   '-','S'),
          ('-','-', '-', '-','1','P','-',   '-','S'),

          ('-', '\','0', '1', '1','1','-',  '-','1'),
          ('-', '\','1', '1', '1','1','-',  '-','0'),

          ('-', '\','0', '1', 'X','1','-',  '-','1'),
          ('-', '\','1', '1', '1','X','-',  '-','0'),

          ('-', 'f','1', '1', '1','1','-',  '0','0'),
          ('-', 'f','0', '1', '1','1','-',  '1','1'),
          ('-', 'v','1', '1', '1','1','-',  '0','0'),
          ('-', 'v','0', '1', '1','1','-',  '1','1'),

          ('1', '\','1', 'X', '1','1','-',  '-','0'),
          ('0', '\','0', 'X', '1','1','-',  '-','1'),

          ('1', '\','1', 'X', '1','X','-',  '-','0'),
          ('0', '\','0', 'X', 'X','1','-',  '-','1'),

          ('-','-', '*', '-', '-','-','-',  '-','S'),
          ('-','-', '-', '*', '1','1','-',  '-','S'),
          ('-','-', '-', '-', '-','-','*',  '-','X')
        ); 
 
       
        CONSTANT U_FD_N_SD_RB_SB_QN : VitalStateTableType (0 to 30, 0 to 7) :=
        -- UDP Ports: D CP TI TE RB SB QN QN+1
        (
          ('1', '\','-', '0', '1','1', '-','0'),
          ('0', '\','-', '0', '1','1', '-','1'),

          ('0', '\','-', '0', 'X','1', '-','1'),
          ('1', '\','-', '0', '1','X', '-','0'),

          ('-','-', '-', '-', 'X','1', '1','1'),
          ('-','-', '-', '-', '1','X', '0','0'),

          ('1', 'f','-', '0', '1','1', '0','0'),
          ('0', 'f','-', '0', '1','1', '1','1'),
          ('1', 'v','-', '0', '1','1', '0','0'),
          ('0', 'v','-', '0', '1','1', '1','1'),

          ('-','-', '-', '-', '0','1', '-','1'),
          ('-','-', '-', '-', '-','0', '-','0'),

          ('-', 'P','-', '-', '-','-', '-','S'),
          ('-', 'r','-', '-', '-','-', '-','S'),
          ('*', '-','-', '-', '-','-', '-','S'),

          ('-', '-', '-', '-','P','1', '-','S'),
          ('-','-', '-', '-', '1','P', '-','S'),

          ('-', '\','0', '1', '1','1', '-','1'),
          ('-', '\','1', '1', '1','1', '-','0'),

          ('-', '\','0', '1', 'X','1', '-','1'),
          ('-', '\','1', '1', '1','X', '-','0'),

          ('-', 'f','1', '1', '1','1', '0','0'),
          ('-', 'f','0', '1', '1','1', '1','1'),
          ('-', 'v','1', '1', '1','1', '0','0'),
          ('-', 'v','0', '1', '1','1', '1','1'),

          ('1', '\','1', 'X', '1','1', '-','0'),
          ('0', '\','0', 'X', '1','1', '-','1'),

          ('1', '\','1', 'X', '1','X', '-','0'),
          ('0', '\','0', 'X', 'X','1', '-','1'),

          ('-','-', '*', '-', '-','-', '-','S'),
          ('-','-', '-', '*', '1','1', '-','S')
        );

       
        CONSTANT U_FD_N_SD_RB_SB_NO : VitalStateTableType (0 to 31, 0 to 8) :=
        -- UDP Ports: D CP TI TE RB SB NOTIFIER_REG QN QN+1
        (
          ('1','\','-', '0', '1','1','-',  '-','1'),
          ('0', '\','-', '0', '1','1','-', '-','0'),

          ('0', '\','-', '0', 'X','1','-', '-','0'),
          ('1', '\','-', '0', '1','X','-', '-','1'),

          ('-','-', '-', '-', 'X','1','-', '0','0'),
          ('-','-', '-', '-', '1','X','-', '1','1'),

          ('1', 'f','-', '0', '1','1','-', '1','1'),
          ('0', 'f','-', '0', '1','1','-', '0','0'),
          ('1', 'v','-', '0', '1','1','-', '1','1'),
          ('0', 'v','-', '0', '1','1','-', '0','0'),

          ('-','-', '-', '-', '0','-','-', '-','0'),
          ('-','-', '-', '-', '1','0','-', '-','1'),

          ('-', 'P','-', '-', '-','-','-', '-','S'),
          ('-', 'r','-', '-', '-','-','-', '-','S'),
          ('*','-', '-', '-', '-','-','-', '-','S'),

          ('-','-', '-', '-','P','1','-',  '-','S'),
          ('-','-', '-', '-','1','P','-',  '-','S'),

          ('-', '\','0', '1', '1','1','-', '-','0'),
          ('-', '\','1', '1', '1','1','-', '-','1'),

          ('-', '\','0', '1', 'X','1','-', '-','0'),
          ('-', '\','1', '1', '1','X','-', '-','1'),

          ('-', 'f','1', '1', '1','1','-', '1','1'),
          ('-', 'f','0', '1', '1','1','-', '0','0'),
          ('-', 'v','1', '1', '1','1','-', '1','1'),
          ('-', 'v','0', '1', '1','1','-', '0','0'),

          ('1', '\','1', 'X', '1','1','-', '-','1'),
          ('0', '\','0', 'X', '1','1','-', '-','0'),

          ('1', '\','1', 'X', '1','X','-', '-','1'),
          ('0', '\','0', 'X', 'X','1','-', '-','0'),

          ('-','-', '*', '-', '-','-','-', '-','S'),
          ('-','-', '-', '*', '1','1','-', '-','S'),
          ('-','-', '-', '-', '-','-','*', '-','X')
        );


       CONSTANT U_FD_P_SD_RB_SB_NO_QN : VitalStateTableType (0 to 31, 0 to 8) :=
       -- UDP Ports: D CP TI TE RB SB NOTIFIER_REG QN QN+1
       (
          ('1', '/','-', '0', '1','1','-',  '-','0'),
          ('0', '/','-', '0', '1','1','-',  '-','1'),

          ('0', '/','-', '0', 'X','1','-',  '-','1'),
          ('1', '/','-', '0', '1','X','-',  '-','0'),

          ('-','-', '-', '-', 'X','1','-',  '1','1'),
          ('-','-', '-', '-', '1','X','-',  '0','0'),

          ('1', '^','-', '0', '1','1','-',  '0','0'),
          ('0', '^','-', '0', '1','1','-',  '1','1'),
          ('1', 'r','-', '0', '1','1','-',  '0','0'),
          ('0', 'r','-', '0', '1','1','-',  '1','1'),

          ('-','-', '-', '-', '0','1','-',  '-','1'),
          ('-','-', '-', '-', '-','0','-',  '-','0'),

          ('-', 'N','-', '-', '1','1','-',  '-','S'),
          ('-', 'f','-', '-', '1','1','-',  '-','S'),
          ('*','-', '-', '-', '-','-','-',  '-','S'),

          ('-','-', '-', '-', 'P','1','-',  '-','S'),
          ('-','-', '-', '-', '1', 'P','-', '-','S'),

          ('-', '/','0', '1', '1','1','-',  '-','1'),
          ('-', '/','1', '1', '1','1','-',  '-','0'),

          ('-', '/','0', '1', 'X','1','-',  '-','1'),
          ('-', '/','1', '1', '1','X','-',  '-','0'),

          ('-', '^','1', '1', '1','1','-',  '0','0'),
          ('-', '^','0', '1', '1','1','-',  '1','1'),
          ('-', 'r','1', '1', '1','1','-',  '0','0'),
          ('-', 'r','0', '1', '1','1','-',  '1','1'),

          ('1', '/','1', 'X', '1','1','-',  '-','0'),
          ('0', '/','0', 'X', '1','1','-',  '-','1'),

          ('1', '/','1', 'X', '1','X','-',  '-','0'),
          ('0', '/','0', 'X', 'X','1','-',  '-','1'),

          ('-','-', '*', '-', '-','-','-',  '-','S'),
          ('-','-', '-', '*', '1','1','-',  '-','S'),
          ('-','-', '-', '-', '-','-','*',  '-','X')
        ); 


         
        CONSTANT U_FD_P_SD_RB_SB_QN : VitalStateTableType (0 to 30, 0 to 7) :=
        -- UDP Ports: D CP TI TE RB SB QN QN+1
        (
          ('1', '/','-', '0', '1','1', '-','0'),
          ('0', '/','-', '0', '1','1', '-','1'),

          ('0', '/','-', '0', 'X','1', '-','1'),
          ('1', '/','-', '0', '1','X', '-','0'),

          ('-','-', '-', '-', 'X','1', '1','1'),
          ('-','-', '-', '-', '1','X', '0','0'),

          ('1', '^','-', '0', '1','1', '0','0'),
          ('0', '^','-', '0', '1','1', '1','1'),
          ('1', 'r','-', '0', '1','1', '0','0'),
          ('0', 'r','-', '0', '1','1', '1','1'),

          ('-','-', '-', '-', '0','1', '-','1'),
          ('-','-', '-', '-', '-','0', '-','0'),

          ('-', 'N','-', '-', '1','1', '-','S'),
          ('-', 'f','-', '-', '1','1', '-','S'),
          ('*','-', '-', '-', '-','-', '-','S'),

          ('-','-', '-', '-', 'P','1', '-','S'),
          ('-','-', '-', '-', '1','P', '-','S'),

          ('-', '/','0', '1', '1','1', '-','1'),
          ('-', '/','1', '1', '1','1', '-','0'),

          ('-', '/','0', '1', 'X','1', '-','1'),
          ('-', '/','1', '1', '1','X', '-','0'),

          ('-', '^','1', '1', '1','1', '0','0'),
          ('-', '^','0', '1', '1','1', '1','1'),
          ('-', 'r','1', '1', '1','1', '0','0'),
          ('-', 'r','0', '1', '1','1', '1','1'),

          ('1', '/','1', 'X', '1','1', '-','0'),
          ('0', '/','0', 'X', '1','1', '-','1'),

          ('1', '/','1', 'X', '1','X', '-','0'),
          ('0', '/','0', 'X', 'X','1', '-','1'),

          ('-','-', '*', '-', '-','-', '-','S'),
          ('-','-', '-', '*', '1','1', '-','S')
        );
       
  
       CONSTANT U_FD_P_SD_RB_SB_NO : VitalStateTableType (0 to 31, 0 to 8) :=
       -- UDP Ports: D CP TI TE RB SB NOTIFIER_REG Q Q+1
       (
          ('1', '/','-', '0', '1','1','-',  '-','1'),
          ('0', '/','-', '0', '1','1','-',  '-','0'),

          ('0', '/','-', '0', 'X','1','-',  '-','0'),
          ('1', '/','-', '0', '1','X','-',  '-','1'),

          ('-','-', '-', '-', 'X','1','-',  '0','0'),
          ('-','-', '-', '-', '1','X','-',  '1','1'),

          ('1', '^','-', '0', '1','1','-',  '1','1'),
          ('0', '^','-', '0', '1','1','-',  '0','0'),
          ('1', 'r','-', '0', '1','1','-',  '1','1'),
          ('0', 'r','-', '0', '1','1','-',  '0','0'),

          ('-','-', '-', '-', '0','-','-',  '-','0'),
          ('-','-', '-', '-', '1','0','-',  '-','1'),

          ('-', 'N','-', '-', '1','1','-',  '-','S'),
          ('-', 'f','-', '-', '1','1','-',  '-','S'),
          ('*','-', '-', '-', '-','-','-',  '-','S'),

          ('-', '-', '-', '-','P','1','-',  '-','S'),
          ('-','-', '-', '-', '1','P', '-', '-','S'),

          ('-', '/','0', '1', '1','1','-',  '-','0'),
          ('-', '/','1', '1', '1','1','-',  '-','1'),

          ('-', '/','0', '1', 'X','1','-',  '-','0'),
          ('-', '/','1', '1', '1','X','-',  '-','1'),

          ('-', '^','1', '1', '1','1','-',  '1','1'),
          ('-', '^','0', '1', '1','1','-',  '0','0'),
          ('-', 'r','1', '1', '1','1','-',  '1','1'),
          ('-', 'r','0', '1', '1','1','-',  '0','0'),

          ('1', '/','1', 'X', '1','1','-',  '-','1'),
          ('0', '/','0', 'X', '1','1','-',  '-','0'),

          ('1', '/','1', 'X', '1','X','-',  '-','1'),
          ('0', '/','0', 'X', 'X','1','-',  '-','0'),

          ('-','-', '*', '-', '-','-','-',  '-','S'),
          ('-','-', '-', '*', '1','1','-',  '-','S'),
          ('-','-', '-', '-', '-','-','*',  '-','X')
       );



        CONSTANT U_FJK_N_RB_SB_X_NO : VitalStateTableType (0 to 34, 0 to 7) := 
        -- UDP Ports: J  K  CP RB  SB  NOTIFIER_REG Q Q+1
        (
           ('0', '0','\','1','1', '-', '-', 'S'),

           ('0', '1','\','1','1', '-', '-', '0'),
           ('0', '1','\','X','1', '-', '-', '0'),
           ('-', '-','-','X','1', '-', '0', '0'),

           ('1', '0','\','1','1', '-', '-', '1'),
           ('1', '0','\','1','X', '-', '-', '1'),
           ('-', '-', '-', '1','X','-','1', '1'),

           ('1', '1','\','1','1', '-', '0', '1'),
           ('1', '1','\','1','1', '-', '1', '0'),

           ('-', '1','\','X','1', '-', '1', '0'),
           ('1', '-','\','1','X', '-', '0', '1'),

           ('0', '0','f','1','1', '-', '-', 'S'),
           ('0', '1','f','1','1', '-', '0', '0'),
           ('1', '0','f','1','1', '-', '1', '1'),
           ('0', '0','v','1','1', '-', '-', 'S'),
           ('0', '1','v','1','1', '-', '0', '0'),
           ('1', '0','v','1','1', '-', '1', '1'),

           ('*', '-','-', '1','1', '-','-', 'S'),
           ('-', '*','-', '1','1', '-','-', 'S'),

           ('-', '-', '-', '0','1', '-', '-','0'),
           ('-', '-', '-', '1','0', '-', '-','1'),
           ('-', '-', '-', '0','0', '-', '-','X'),

           ('X', '0', '\','1','1', '-', '1','1'),
           ('X', '1', '\','1','1', '-', '1','0'),
           ('0', 'X', '\','1','1', '-', '0','0'),
           ('1', 'X', '\','1','1', '-', '0','1'),

           ('X', '0','f','1','1', '-', '1', '1'), 
           ('0', 'X','f','1','1', '-', '0', '0'),
           ('X', '0','v','1','1', '-', '1', '1'),
           ('0', 'X','v','1','1', '-', '0', '0'),
  
           ('-', '-','P','-','-', '-', '-', 'S'), 
           ('-', '-','r','-','-', '-', '-', 'S'),
           ('-', '-','-','P','1', '-', '-', 'S'),
           ('-', '-','-','1','P', '-', '-', 'S'), 
           ('-', '-','-','-','-', '*', '-', 'X') 
         );


         CONSTANT U_FJK_P_RB_SB_X_NO : VitalStateTableType (0 to 34, 0 to 7) :=
         -- UDP Ports: J K CP RB SB NOTIFIER_REG Q Q+1
         (
           ('0', '0','/','1','1','-', '-', 'S'),

           ('0', '1','/','1','1','-', '-', '0'),
           ('0', '1','/','X','1','-', '-', '0'),
           ('-', '-','-','X','1','-', '0', '0'),

           ('1', '0','/','1','1','-', '-', '1'),
           ('1', '0','/','1','X','-', '-', '1'),
           ('-', '-','-','1','X','-', '1', '1'),

           ('1', '1','/','1','1','-', '0', '1'),
           ('1', '1','/','1','1','-', '1', '0'),

           ('-', '1','/','X','1','-', '1', '0'),
           ('1', '-','/','1','X','-', '0', '1'),

           ('0', '0','^','1','1','-', '-', 'S'),
           ('0', '1','^','1','1','-', '0', '0'),
           ('1', '0','^','1','1','-', '1', '1'),
           ('0', '0','r','1','1','-', '-', 'S'),
           ('0', '1','r','1','1','-', '0', '0'),
           ('1', '0','r','1','1','-', '1', '1'),

           ('*', '-','-', '1','1','-', '-', 'S'),
           ('-', '*','-', '1','1','-', '-', 'S'),

           ('-', '-', '-', '0','1','-', '-','0'),
           ('-', '-', '-', '1','0','-', '-','1'),
           ('-', '-', '-', '0','0','-', '-','X'),

           ('X', '0', '/', '1','1','-', '1','1'),
           ('X', '1', '/', '1','1','-', '1','0'),
           ('0', 'X', '/', '1','1','-', '0','0'),
           ('1', 'X', '/', '1','1','-', '0','1'),

           ('X', '0','^','1','1','-', '1', '1'),
           ('0', 'X','^','1','1','-', '0', '0'),
           ('X', '0','r','1','1','-', '1', '1'),
           ('0', 'X','r','1','1','-', '0', '0'),

           ('-', '-','N','1','1','-', '-', 'S'),
           ('-', '-','f','1','1','-', '-', 'S'),

           ('-', '-','-','P','1','-', '-', 'S'),
           ('-', '-','-','1','P','-', '-', 'S'),
           ('-', '-','-','-','-','*', '-', 'X')
         );      



        CONSTANT U_FT_N_RB_SB_X_NO : VitalStateTableType (0 to 13, 0 to 5) :=
        -- UDP Ports: CP RB SB NOTIFIER_REG Q Q+1
        (
           ('\','1','1', '-','0','1'),
           ('\','1','1', '-','1','0'),

           ('-','0','1', '-','-','0'),
           ('-','1','0', '-','-','1'),
           ('-','0','0', '-','-','X'),

           ('P', '-','-','-','-','S'),
           ('r', '-','-','-','-','S'),
           ('-','P', '-','-','-','S'),
           ('-','-','P','-','-', 'S'),

           ('\','X','1', '-','1','0'),
           ('\','1','X', '-','0','1'),
           ('-','X','1', '-','0','0'),
           ('-','1','X', '-','1','1'),
           ('-','-','-', '*','-','X')
        );

          
         CONSTANT U_FT_N_TE_RB_SB_NO : VitalStateTableType (0 to 14, 0 to 6) :=
         -- UDP Ports: TE CP RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '\','1','1',  '-','0','1'),
           ('1', '\','1','1',  '-','1','0'),

           ('1','P', '-','-',  '-','-','S'),
           ('1','r', '-','-',  '-','-','S'),

           ('-', '-','P','-',  '-','-','S'),
           ('-', '-', '-', 'P','-','-','S'),
           ('-', '-', '0','1', '-','-','0'),
           ('-', '-', '-','0', '-','-','1'),
           ('1', '\','X','1',  '-','1','0'),
           ('1', '\','1','X',  '-','0','1'),

           ('0', '-','1','1',  '-','-','S'),
           ('-', '-', 'X','1', '-','0','0'),
           ('-', '-', '1','X', '-','1','1'),
           ('*', '-', '-','-',  '-','-','S'),
           ('-', '-', '-','-',  '*','-','X')
         );

       

        CONSTANT U_FT_P_RB_SB_X_NO : VitalStateTableType (0 to 13, 0 to 5) :=
        -- UDP Ports: CP RB SB NOTIFIER_REG Q Q+1
        (
           ('/','1','1','-', '0','1'),
           ('/','1','1','-', '1','0'),

           ('-','0','1','-', '-','0'),
           ('-','1','0','-', '-','1'),
           ('-','0','0','-', '-','X'),

           ('N', '1','1','-','-','S'),
           ('f', '1','1','-','-','S'),
           ('-','P', '-','-','-','S'),
           ('-','-','P','-', '-','S'),

           ('/','X','1','-', '1','0'),
           ('/','1','X','-', '0','1'),
           ('-','X','1','-', '0','0'),
           ('-','1','X','-', '1','1'),
           ('-','-','-','*', '-','X')
        );



         CONSTANT U_FT_P_TE_RB_SB_NO : VitalStateTableType (0 to 14, 0 to 6) :=
         -- UDP Ports: TE CP RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '/','1','1','-', '0','1'),
           ('1', '/','1','1','-', '1','0'),

           ('1','N', '1','1','-', '-','S'),
           ('1','f', '1','1','-', '-','S'),

           ('-', '-','P','-', '-','-','S'),
           ('-', '-', '-','P','-','-','S'),
           ('-', '-','0','-', '-','-','0'),
           ('-', '-', '1','0','-','-','1'),
           ('1', '/','X','1', '-','1','0'),
           ('1', '/','1','X', '-','0','1'),

           ('0', '-','1','1', '-','-','S'),
           ('-', '-','X','1', '-','0','0'),
           ('-', '-', '1','X','-','1','1'),
           ('*', '-','-','-', '-','-','S'),
           ('-', '-', '-','-','*','-','X')
         );



         CONSTANT U_LD_N_RB_SB_X_NO : VitalStateTableType (0 to 15, 0 to 6) :=
         -- UDP Ports: D CK RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '0', '1', '1','-', '-','1'),
           ('0', '0', '1', '1','-', '-','0'),

           ('1', 'X', '1', '1','-', '1','1'),
           ('0', 'X', '1', '1','-', '0','0'),

           ('-', '-', '0', '1','-', '-','0'),
           ('-', '-', '1', '0','-', '-','1'),
           ('-', '-', '0', '0','-', '-','X'),

           ('-', '1', '1', '1','-', '-','S'),

           ('0', '0', 'X', '1','-', '-','0'),
           ('0', '-', 'X', '1','-', '0','0'),
           ('1', '0', '1', 'X','-', '-','1'), 
           ('1', '-', '1', 'X','-', '1','1'),

           ('-', '1', 'X', '1','-', '0','0'),
           ('-', '1', '1', 'X','-', '1','1'),

           ('-', 'R', '1', '1','-', '-','S'),
           ('-', '-', '-', '-','*', '-','X')
         );


         CONSTANT U_LD_N_SB_RB_QN_NO : VitalStateTableType (0 to 15, 0 to 6) :=
         -- UDP Ports: D CK RB SB NOTIFIER_REG QN QN+1
         (
           ('1', '0', '1', '1','-', '-','0'),
           ('0', '0', '1', '1','-', '-','1'),

           ('1', 'X', '1', '1','-', '0','0'),
           ('0', 'X', '1', '1','-', '1','1'),

           ('-', '-', '0', '1','-', '-','1'),
           ('-', '-', '1', '0','-', '-','0'),
           ('-', '-', '0', '0','-', '-','1'),

           ('-', '1', '1', '1','-', '-','S'),

           ('0', '0', 'X', '1','-', '-','1'),
           ('0', '-', 'X', '1','-', '1','1'),
           ('1', '0', '1', 'X','-', '-','0'),
           ('1', '-', '1', 'X','-', '0','0'),

           ('-', '1', 'X', '1','-', '1','1'),
           ('-', '1', '1', 'X','-', '0','0'),

           ('-', 'R', '1', '1','-', '-','S'),
           ('-', '-', '-', '-','*', '-','X')
         );



         CONSTANT U_LD_P_RB_SB_X_NO : VitalStateTableType (0 to 15, 0 to 6) :=
         -- UDP Ports: D CK RB SB NOTIFIER_REG Q Q+1
         (
           ('1', '1', '1', '1','-', '-','1'),
           ('0', '1', '1', '1','-', '-','0'),

           ('1', 'X', '1', '1','-', '1','1'),
           ('0', 'X', '1', '1','-', '0','0'),

           ('-', '-', '0', '1','-', '-','0'),
           ('-', '-', '1', '0','-', '-','1'),
           ('-', '-', '0', '0','-', '-','X'),

           ('-', '0', '1', '1','-', '-','S'),

           ('0', '1', 'X', '1','-', '-','0'),
           ('0', '-', 'X', '1','-', '0','0'),
           ('1', '1', '1', 'X','-', '-','1'),
           ('1', '-', '1', 'X','-', '1','1'),

           ('-', '0', 'X', '1','-', '0','0'),
           ('-', '0', '1', 'X','-', '1','1'),

           ('-', 'F', '1', '1','-', '-','S'),
           ('-', '-', '-', '-','*', '-','X')
         );



          CONSTANT U_LD_P_SB_RB_QN_NO : VitalStateTableType (0 to 15, 0 to 6) :=
          -- UDP Ports: D CK RB SB NOTIFIER_REG QN QN+1
          (
            ('1', '1', '1', '1','-', '-','0'),
            ('0', '1', '1', '1','-', '-','1'),

            ('1', 'X', '1', '1','-', '0','0'),
            ('0', 'X', '1', '1','-', '1','1'),

            ('-', '-', '0', '1','-', '-','1'),
            ('-', '-', '1', '0','-', '-','0'),
            ('-', '-', '0', '0','-', '-','1'),

            ('-', '0', '1', '1','-', '-','S'),

            ('0', '1', 'X', '1','-', '-','1'),
            ('0', '-', 'X', '1','-', '1','1'),
            ('1', '1', '1', 'X','-', '-','0'),
            ('1', '-', '1', 'X','-', '0','0'),

            ('-', '0', 'X', '1','-', '1','1'),
            ('-', '0', '1', 'X','-', '0','0'),

            ('-', 'F', '1', '1','-', '-','S'),
            ('-', '-', '-', '-','*', '-','X')
           );





           CONSTANT U_FJK_N_RB_SB_QN_NO  : VitalStateTableType (0 to 34, 0 to 7) :=
           -- UDP Ports: J K CP RB SB NOTIFIER_REG QN QN+1
           ( 
             ('0', '0','\','1','1', '-','-', 'S'),

             ('0', '1','\','1','1', '-','-', '1'),
             ('0', '1','\','X','1', '-','-', '1'),
             ('-', '-', '-','X','1', '-','1','1'),

             ('1', '0','\','1','1', '-','-', '0'),
             ('1', '0','\','1','X', '-','-', '0'),
             ('-', '-', '-','1','X', '-','0','0'),

             ('1', '1','\','1','1', '-','1', '0'),
             ('1', '1','\','1','1', '-','0', '1'),

             ('-', '1','\','X','1', '-','0', '1'),
             ('1', '-','\','1','X', '-','1', '0'),

             ('0', '0','v','1','1', '-','-', 'S'),
             ('0', '1','v','1','1', '-','1', '1'),
             ('1', '0','v','1','1', '-','0', '0'),
             ('0', '0','f','1','1', '-','-', 'S'),
             ('0', '1','f','1','1', '-','1', '1'),
             ('1', '0','f','1','1', '-','0', '0'),

             ('*', '-', '-','1','1', '-','-','S'),
             ('-', '*', '-','1','1', '-','-','S'),

             ('-', '-', '-','1','0', '-','-','0'),
             ('-', '-', '-','0','1', '-','-','1'),
             ('-', '-', '-','0','0', '-','-','0'),

             ('-', '-','P', '1','1', '-','-','S'),
             ('-', '-','r', '1','1', '-','-','S'),

             ('X', '0','\', '1','1', '-','0','0'),
             ('X', '1','\', '1','1', '-','0','1'),
             ('0', 'X','\', '1','1', '-','1','1'),
             ('1', 'X','\', '1','1', '-','1','0'),

             ('X', '0','v','1','1', '-','0', '0'),
             ('0', 'X','v','1','1', '-','1', '1'),
             ('X', '0','f','1','1', '-','0', '0'),
             ('0', 'X','f','1','1', '-','1', '1'),

             ('-', '-', '-','P', '1','-','-','S'),
             ('-', '-', '-','1', 'P','-','-','S'),
             ('-', '-', '-','-', '-','*','-','X')
          );		 
END mtbTablePackage;
-- Filename     : mux21x1.vhd
-- Description  : 2 to 1 MULTIPLEXER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY mux21x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (66.110047 ps, 58.877317 ps);
  tpd_in2_q         : VitalDelayType01 := (68.023047 ps, 59.592580 ps);
  tpd_s_q           : VitalDelayType01 := (87.868142 ps, 85.602910 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_s        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  s          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF mux21x1 : ENTITY IS TRUE;
END mux21x1;

ARCHITECTURE behavioral OF mux21x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL s_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( s_ipd, s, tipd_s );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,s_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalMUX2(	Data0=>in1_ipd,	Data1=>in2_ipd,
				dSelect=>s_ipd);

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(s_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_s_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : mux21x2.vhd
-- Description  : 2 to 1 MULTIPLEXER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY mux21x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (86.466356 ps, 81.520924 ps);
  tpd_in2_q         : VitalDelayType01 := (91.929218 ps, 80.780857 ps);
  tpd_s_q           : VitalDelayType01 := (115.595690 ps, 114.121860 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_s        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  s          : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF mux21x2 : ENTITY IS TRUE;
END mux21x2;

ARCHITECTURE behavioral OF mux21x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL s_ipd           : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( s_ipd, s, tipd_s );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,s_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalMUX2(	Data0=>in1_ipd,	Data1=>in2_ipd,
				dSelect=>s_ipd);

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(s_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_s_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : mux41x1.vhd
-- Description  : 4 to 1 MULTIPLEXER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY mux41x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (112.576860 ps, 111.905080 ps);
  tpd_in3_q         : VitalDelayType01 := (110.197920 ps, 112.185970 ps);
  tpd_s0_q          : VitalDelayType01 := (82.758567 ps, 71.663103 ps);
  tpd_in2_q         : VitalDelayType01 := (109.903890 ps, 113.664700 ps);
  tpd_in4_q         : VitalDelayType01 := (103.191550 ps, 110.150540 ps);
  tpd_s1_q          : VitalDelayType01 := (139.241060 ps, 137.825450 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_s0       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_s1       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  s0         : IN         std_logic;
  s1         : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF mux41x1 : ENTITY IS TRUE;
END mux41x1;

ARCHITECTURE behavioral OF mux41x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL s0_ipd          : std_logic :='X';
SIGNAL s1_ipd          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( s0_ipd, s0, tipd_s0 );
  VitalWireDelay ( s1_ipd, s1, tipd_s1 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,s0_ipd,s1_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalMUX4(	Data=>(in4_ipd,in2_ipd,in3_ipd,in1_ipd),
				dSelect=>(s1_ipd,s0_ipd ));

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 2=>(s0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_s0_q),TRUE),
 3=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 4=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 5=>(s1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_s1_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : mux41x2.vhd
-- Description  : 4 to 1 MULTIPLEXER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY mux41x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (129.417450 ps, 133.684660 ps);
  tpd_in3_q         : VitalDelayType01 := (128.423720 ps, 132.833150 ps);
  tpd_in2_q         : VitalDelayType01 := (125.196540 ps, 133.442480 ps);
  tpd_in4_q         : VitalDelayType01 := (123.896140 ps, 132.653980 ps);
  tpd_s0_q          : VitalDelayType01 := (96.611435 ps, 91.475451 ps);
  tpd_s1_q          : VitalDelayType01 := (157.548330 ps, 159.563090 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_s0       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_s1       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  s0         : IN         std_logic;
  s1         : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF mux41x2 : ENTITY IS TRUE;
END mux41x2;

ARCHITECTURE behavioral OF mux41x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL s0_ipd          : std_logic :='X';
SIGNAL s1_ipd          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( s0_ipd, s0, tipd_s0 );
  VitalWireDelay ( s1_ipd, s1, tipd_s1 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,s0_ipd,s1_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalMUX4(	Data=>(in4_ipd,in2_ipd,in3_ipd,in1_ipd),
				dSelect=>(s1_ipd,s0_ipd ));

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 2=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(s0_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_s0_q),TRUE),
 5=>(s1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_s1_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand2x0.vhd
-- Description  : 2 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand2x0 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (22.445213 ps, 24.666770 ps);
  tpd_in2_qn        : VitalDelayType01 := (26.670392 ps, 29.522351 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand2x0 : ENTITY IS TRUE;
END nand2x0;

ARCHITECTURE behavioral OF nand2x0 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand2x1.vhd
-- Description  : 2 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand2x1 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (17.684244 ps, 19.523806 ps);
  tpd_in2_qn        : VitalDelayType01 := (21.676689 ps, 23.805364 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand2x1 : ENTITY IS TRUE;
END nand2x1;

ARCHITECTURE behavioral OF nand2x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand2x2.vhd
-- Description  : 2 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand2x2 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (11.271072 ps, 12.221686 ps);
  tpd_in2_qn        : VitalDelayType01 := (16.172091 ps, 17.110230 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand2x2 : ENTITY IS TRUE;
END nand2x2;

ARCHITECTURE behavioral OF nand2x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand2x4.vhd
-- Description  : 2 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand2x4 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (11.491749 ps, 12.893703 ps);
  tpd_in2_qn        : VitalDelayType01 := (16.322172 ps, 16.700951 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand2x4 : ENTITY IS TRUE;
END nand2x4;

ARCHITECTURE behavioral OF nand2x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand3x0.vhd
-- Description  : 3 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand3x0 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (21.044111 ps, 20.354961 ps);
  tpd_in2_qn        : VitalDelayType01 := (26.948362 ps, 27.658440 ps);
  tpd_in3_qn        : VitalDelayType01 := (31.696153 ps, 28.850761 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand3x0 : ENTITY IS TRUE;
END nand3x0;

ARCHITECTURE behavioral OF nand3x0 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand3x1.vhd
-- Description  : 3 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand3x1 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (91.117459 ps, 97.696712 ps);
  tpd_in2_qn        : VitalDelayType01 := (99.562582 ps, 106.185500 ps);
  tpd_in3_qn        : VitalDelayType01 := (107.305770 ps, 108.233550 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand3x1 : ENTITY IS TRUE;
END nand3x1;

ARCHITECTURE behavioral OF nand3x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand3x2.vhd
-- Description  : 3 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand3x2 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (102.012970 ps, 113.162850 ps);
  tpd_in2_qn        : VitalDelayType01 := (109.712410 ps, 120.667200 ps);
  tpd_in3_qn        : VitalDelayType01 := (117.957620 ps, 123.061390 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand3x2 : ENTITY IS TRUE;
END nand3x2;

ARCHITECTURE behavioral OF nand3x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand3x4.vhd
-- Description  : 3 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand3x4 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (126.004160 ps, 146.999080 ps);
  tpd_in2_qn        : VitalDelayType01 := (134.432240 ps, 155.207200 ps);
  tpd_in3_qn        : VitalDelayType01 := (142.822950 ps, 157.493060 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand3x4 : ENTITY IS TRUE;
END nand3x4;

ARCHITECTURE behavioral OF nand3x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand4x0.vhd
-- Description  : 4 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand4x0 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (24.033126 ps, 21.601776 ps);
  tpd_in2_qn        : VitalDelayType01 := (31.972397 ps, 29.991676 ps);
  tpd_in3_qn        : VitalDelayType01 := (38.563086 ps, 37.460466 ps);
  tpd_in4_qn        : VitalDelayType01 := (42.988683 ps, 40.006239 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand4x0 : ENTITY IS TRUE;
END nand4x0;

ARCHITECTURE behavioral OF nand4x0 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nand4x1.vhd
-- Description  : 4 input NAND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nand4x1 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (85.329394 ps, 84.559394 ps);
  tpd_in2_qn        : VitalDelayType01 := (94.661305 ps, 94.543409 ps);
  tpd_in3_qn        : VitalDelayType01 := (102.354730 ps, 102.394050 ps);
  tpd_in4_qn        : VitalDelayType01 := (108.535400 ps, 105.142560 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nand4x1 : ENTITY IS TRUE;
END nand4x1;

ARCHITECTURE behavioral OF nand4x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNAND4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nbuffx16.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nbuffx16 IS
 GENERIC
 (
  tpd_inpp_q         : VitalDelayType01 := (67.561282 ps, 65.093695 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nbuffx16 : ENTITY IS TRUE;
END nbuffx16;

ARCHITECTURE behavioral OF nbuffx16 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nbuffx2.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nbuffx2 IS
 GENERIC
 (
  tpd_inpp_q        : VitalDelayType01 := (47.530521 ps, 44.780481 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nbuffx2 : ENTITY IS TRUE;
END nbuffx2;

ARCHITECTURE behavioral OF nbuffx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nbuffx32.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nbuffx32 IS
 GENERIC
 (
  tpd_inpp_q         : VitalDelayType01 := (139.078060 ps, 140.345690 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nbuffx32 : ENTITY IS TRUE;
END nbuffx32;

ARCHITECTURE behavioral OF nbuffx32 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nbuffx4.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nbuffx4 IS
 GENERIC
 (
  tpd_inpp_q        : VitalDelayType01 := (73.304376 ps, 70.425422 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nbuffx4 : ENTITY IS TRUE;
END nbuffx4;

ARCHITECTURE behavioral OF nbuffx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nbuffx8.vhd
-- Description  : BUFFER
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nbuffx8 IS
 GENERIC
 (
  tpd_inpp_q        : VitalDelayType01 := (70.825671 ps, 66.485000 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nbuffx8 : ENTITY IS TRUE;
END nbuffx8;

ARCHITECTURE behavioral OF nbuffx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalBUF( inpp_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor2x0.vhd
-- Description  : 2 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor2x0 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (18.639645 ps, 19.296267 ps);
  tpd_in2_qn       : VitalDelayType01 := (25.673690 ps, 27.155710 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor2x0 : ENTITY IS TRUE;
END nor2x0;

ARCHITECTURE behavioral OF nor2x0 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor2x1.vhd
-- Description  : 2 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor2x1 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (16.621598 ps, 17.914259 ps);
  tpd_in2_qn       : VitalDelayType01 := (23.641211 ps, 26.223356 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor2x1 : ENTITY IS TRUE;
END nor2x1;

ARCHITECTURE behavioral OF nor2x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor2x2.vhd
-- Description  : 2 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor2x2 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (14.281168 ps, 15.133711 ps);
  tpd_in2_qn       : VitalDelayType01 := (25.513670 ps, 26.078961 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor2x2 : ENTITY IS TRUE;
END nor2x2;

ARCHITECTURE behavioral OF nor2x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor2x4.vhd
-- Description  : 2 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor2x4 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (13.871586 ps, 13.910315 ps);
  tpd_in2_qn       : VitalDelayType01 := (23.437399 ps, 24.216774 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor2x4 : ENTITY IS TRUE;
END nor2x4;

ARCHITECTURE behavioral OF nor2x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor3x0.vhd
-- Description  : 3 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor3x0 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (25.631000 ps, 28.853231 ps);
  tpd_in2_qn       : VitalDelayType01 := (44.689720 ps, 43.593298 ps);
  tpd_in3_qn       : VitalDelayType01 := (52.556157 ps, 50.566498 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor3x0 : ENTITY IS TRUE;
END nor3x0;

ARCHITECTURE behavioral OF nor3x0 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor3x1.vhd
-- Description  : 3 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor3x1 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (95.183817 ps, 84.025344 ps);
  tpd_in2_qn       : VitalDelayType01 := (114.410630 ps, 101.347880 ps);
  tpd_in3_qn       : VitalDelayType01 := (123.229890 ps, 112.427160 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor3x1 : ENTITY IS TRUE;
END nor3x1;

ARCHITECTURE behavioral OF nor3x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor3x2.vhd
-- Description  : 3 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor3x2 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (105.603160 ps, 93.058929 ps);
  tpd_in2_qn       : VitalDelayType01 := (124.372300 ps, 110.324860 ps);
  tpd_in3_qn       : VitalDelayType01 := (132.902190 ps, 121.572040 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor3x2 : ENTITY IS TRUE;
END nor3x2;

ARCHITECTURE behavioral OF nor3x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor3x4.vhd
-- Description  : 3 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor3x4 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (133.975810 ps, 119.011720 ps);
  tpd_in2_qn       : VitalDelayType01 := (152.714470 ps, 136.606660 ps);
  tpd_in3_qn       : VitalDelayType01 := (161.808710 ps, 149.006380 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor3x4 : ENTITY IS TRUE;
END nor3x4;

ARCHITECTURE behavioral OF nor3x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor4x0.vhd
-- Description  : 4 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor4x0 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (26.693679 ps, 28.258116 ps);
  tpd_in2_qn       : VitalDelayType01 := (53.489940 ps, 42.462129 ps);
  tpd_in3_qn       : VitalDelayType01 := (71.239674 ps, 51.405799 ps);
  tpd_in4_qn       : VitalDelayType01 := (78.669242 ps, 54.755834 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor4x0 : ENTITY IS TRUE;
END nor4x0;

ARCHITECTURE behavioral OF nor4x0 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : nor4x1.vhd
-- Description  : 4 input NOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY nor4x1 IS
 GENERIC
 (
  tpd_in1_qn       : VitalDelayType01 := (97.246070 ps, 93.296852 ps);
  tpd_in2_qn       : VitalDelayType01 := (88.615598 ps, 82.696307 ps);
  tpd_in3_qn       : VitalDelayType01 := (100.802540 ps, 100.329670 ps);
  tpd_in4_qn       : VitalDelayType01 := (93.193889 ps, 90.563026 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF nor4x1 : ENTITY IS TRUE;
END nor4x1;

ARCHITECTURE behavioral OF nor4x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE qn_zd : std_ulogic;

BEGIN


qn_zd :=  VitalNOR4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa21x1.vhd
-- Description  : 2 wide 1-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa21x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (98.430306 ps, 87.439947 ps);
  tpd_in2_q        : VitalDelayType01 := (80.812918 ps, 80.357270 ps);
  tpd_in3_q        : VitalDelayType01 := (79.773967 ps, 70.532635 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa21x1 : ENTITY IS TRUE;
END oa21x1;

ARCHITECTURE behavioral OF oa21x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in1_ipd, in2_ipd );
q_zd := VitalAND2( in3_ipd, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa21x2.vhd
-- Description  : 2 wide 1-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa21x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (94.054830 ps, 86.484596 ps);
  tpd_in2_q        : VitalDelayType01 := (78.003573 ps, 80.305721 ps);
  tpd_in3_q        : VitalDelayType01 := (81.832726 ps, 86.691092 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa21x2 : ENTITY IS TRUE;
END oa21x2;

ARCHITECTURE behavioral OF oa21x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in1_ipd, in2_ipd );
q_zd := VitalAND2( in3_ipd, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa221x1.vhd
-- Description  : 3 wide 1-2-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa221x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (141.574250 ps, 121.626940 ps);
  tpd_in2_q         : VitalDelayType01 := (124.036080 ps, 114.373680 ps);
  tpd_in3_q         : VitalDelayType01 := (127.310750 ps, 109.792070 ps);
  tpd_in4_q         : VitalDelayType01 := (110.364550 ps, 98.705936 ps);
  tpd_in5_q         : VitalDelayType01 := (104.059990 ps, 105.294470 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa221x1 : ENTITY IS TRUE;
END oa221x1;

ARCHITECTURE behavioral OF oa221x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in3_ipd, in4_ipd );
q_zd := VitalAND3( in5_ipd, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa221x2.vhd
-- Description  : 3 wide 1-2-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa221x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (155.521520 ps, 136.275850 ps);
  tpd_in2_q         : VitalDelayType01 := (139.443380 ps, 129.883490 ps);
  tpd_in3_q         : VitalDelayType01 := (142.314230 ps, 126.156050 ps);
  tpd_in4_q         : VitalDelayType01 := (126.320550 ps, 115.535670 ps);
  tpd_in5_q         : VitalDelayType01 := (120.465390 ps, 127.085020 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa221x2 : ENTITY IS TRUE;
END oa221x2;

ARCHITECTURE behavioral OF oa221x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in3_ipd, in4_ipd );
q_zd := VitalAND3( in5_ipd, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa222x1.vhd
-- Description  : 3 wide 2-2-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa222x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (174.858240 ps, 149.473500 ps);
  tpd_in2_q         : VitalDelayType01 := (156.707830 ps, 141.599350 ps);
  tpd_in3_q         : VitalDelayType01 := (162.108460 ps, 147.416180 ps);
  tpd_in4_q         : VitalDelayType01 := (146.085320 ps, 135.880400 ps);
  tpd_in5_q         : VitalDelayType01 := (140.540780 ps, 127.169650 ps);
  tpd_in6_q         : VitalDelayType01 := (126.677770 ps, 118.705340 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa222x1 : ENTITY IS TRUE;
END oa222x1;

ARCHITECTURE behavioral OF oa222x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in6_ipd, in5_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in4_ipd, in3_ipd );
q_zd := VitalAND3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa222x2.vhd
-- Description  : 3 wide 2-2-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa222x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (193.228720 ps, 169.871660 ps);
  tpd_in2_q         : VitalDelayType01 := (175.359190 ps, 161.058770 ps);
  tpd_in3_q         : VitalDelayType01 := (179.974380 ps, 169.352370 ps);
  tpd_in4_q         : VitalDelayType01 := (164.537760 ps, 157.916100 ps);
  tpd_in5_q         : VitalDelayType01 := (158.004580 ps, 149.408740 ps);
  tpd_in6_q         : VitalDelayType01 := (145.933400 ps, 141.789580 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa222x2 : ENTITY IS TRUE;
END oa222x2;

ARCHITECTURE behavioral OF oa222x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in6_ipd, in5_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in4_ipd, in3_ipd );
q_zd := VitalAND3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_q),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa22x1.vhd
-- Description  : 2 wide 2-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa22x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (104.130420 ps, 87.602355 ps);
  tpd_in2_q        : VitalDelayType01 := (87.248238 ps, 80.692058 ps);
  tpd_in3_q        : VitalDelayType01 := (88.985914 ps, 82.175037 ps);
  tpd_in4_q        : VitalDelayType01 := (76.066498 ps, 73.482707 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa22x1 : ENTITY IS TRUE;
END oa22x1;

ARCHITECTURE behavioral OF oa22x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in4_ipd, in3_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
q_zd := VitalAND2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oa22x2.vhd
-- Description  : 2 wide 2-2 OR-AND
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oa22x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (113.840000 ps, 97.539274 ps);
  tpd_in2_q        : VitalDelayType01 := (98.756487 ps, 91.734890 ps);
  tpd_in3_q        : VitalDelayType01 := (99.734127 ps, 96.040316 ps);
  tpd_in4_q        : VitalDelayType01 := (87.370302 ps, 87.154779 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oa22x2 : ENTITY IS TRUE;
END oa22x2;

ARCHITECTURE behavioral OF oa22x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE q_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in4_ipd, in3_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
q_zd := VitalAND2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai21x1.vhd
-- Description  : 2 wide 1-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai21x1 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (121.022060 ps, 117.024400 ps);
  tpd_in2_qn        : VitalDelayType01 := (113.730440 ps, 101.693290 ps);
  tpd_in3_qn        : VitalDelayType01 := (117.279050 ps, 95.602645 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai21x1 : ENTITY IS TRUE;
END oai21x1;

ARCHITECTURE behavioral OF oai21x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in1_ipd, in2_ipd );
qn_zd := VitalNAND2( in3_ipd, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai21x2.vhd
-- Description  : 2 wide 1-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai21x2 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (128.249000 ps, 125.224560 ps);
  tpd_in2_qn        : VitalDelayType01 := (121.405080 ps, 110.091460 ps);
  tpd_in3_qn        : VitalDelayType01 := (126.048360 ps, 104.332790 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai21x2 : ENTITY IS TRUE;
END oai21x2;

ARCHITECTURE behavioral OF oai21x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in1_ipd, in2_ipd );
qn_zd := VitalNAND2( in3_ipd, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai221x1.vhd
-- Description  : 3 wide 1-2-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai221x1 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (197.024210 ps, 202.864740 ps);
  tpd_in2_qn         : VitalDelayType01 := (188.355410 ps, 184.298490 ps);
  tpd_in3_qn         : VitalDelayType01 := (171.124160 ps, 179.505250 ps);
  tpd_in4_qn         : VitalDelayType01 := (159.061310 ps, 162.267280 ps);
  tpd_in5_qn         : VitalDelayType01 := (151.194820 ps, 151.582420 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai221x1 : ENTITY IS TRUE;
END oai221x1;

ARCHITECTURE behavioral OF oai221x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in3_ipd, in4_ipd );
qn_zd := VitalNAND3( in5_ipd, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai221x2.vhd
-- Description  : 3 wide 1-2-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai221x2 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (209.823660 ps, 217.245920 ps);
  tpd_in2_qn         : VitalDelayType01 := (202.699910 ps, 199.630310 ps);
  tpd_in3_qn         : VitalDelayType01 := (185.683290 ps, 195.572120 ps);
  tpd_in4_qn         : VitalDelayType01 := (173.238930 ps, 176.770180 ps);
  tpd_in5_qn         : VitalDelayType01 := (167.439280 ps, 168.635270 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai221x2 : ENTITY IS TRUE;
END oai221x2;

ARCHITECTURE behavioral OF oai221x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in3_ipd, in4_ipd );
qn_zd := VitalNAND3( in5_ipd, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai222x1.vhd
-- Description  : 3 wide 2-2-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai222x1 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (260.125100 ps, 264.360850 ps);
  tpd_in2_qn         : VitalDelayType01 := (251.004170 ps, 244.896550 ps);
  tpd_in3_qn         : VitalDelayType01 := (227.365390 ps, 244.429010 ps);
  tpd_in4_qn         : VitalDelayType01 := (213.983770 ps, 224.902050 ps);
  tpd_in5_qn         : VitalDelayType01 := (233.559730 ps, 211.653990 ps);
  tpd_in6_qn         : VitalDelayType01 := (215.809670 ps, 194.095220 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai222x1 : ENTITY IS TRUE;
END oai222x1;

ARCHITECTURE behavioral OF oai222x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in6_ipd, in5_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in4_ipd, in3_ipd );
qn_zd := VitalNAND3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai222x2.vhd
-- Description  : 3 wide 2-2-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai222x2 IS
 GENERIC
 (
  tpd_in1_qn         : VitalDelayType01 := (273.967760 ps, 278.817950 ps);
  tpd_in2_qn         : VitalDelayType01 := (264.168310 ps, 257.933690 ps);
  tpd_in3_qn         : VitalDelayType01 := (241.878700 ps, 259.955200 ps);
  tpd_in4_qn         : VitalDelayType01 := (227.642910 ps, 238.975230 ps);
  tpd_in5_qn         : VitalDelayType01 := (243.372000 ps, 226.137400 ps);
  tpd_in6_qn         : VitalDelayType01 := (232.119300 ps, 212.067940 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in5      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in6      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  in5        : IN         std_logic;
  in6        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai222x2 : ENTITY IS TRUE;
END oai222x2;

ARCHITECTURE behavioral OF oai222x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';
SIGNAL in5_ipd         : std_logic :='X';
SIGNAL in6_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
  VitalWireDelay ( in5_ipd, in5, tipd_in5 );
  VitalWireDelay ( in6_ipd, in6, tipd_in6 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd,in5_ipd,in6_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE g3_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in6_ipd, in5_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
g3_t := VitalOR2( in4_ipd, in3_ipd );
qn_zd := VitalNAND3( g1_t, g2_t, g3_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE),
 4=>(in5_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in5_qn),TRUE),
 5=>(in6_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in6_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai22x1.vhd
-- Description  : 2 wide 2-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai22x1 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (153.086960 ps, 158.026390 ps);
  tpd_in2_qn        : VitalDelayType01 := (144.787130 ps, 140.221500 ps);
  tpd_in3_qn        : VitalDelayType01 := (126.701900 ps, 132.195900 ps);
  tpd_in4_qn        : VitalDelayType01 := (118.726350 ps, 119.247800 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai22x1 : ENTITY IS TRUE;
END oai22x1;

ARCHITECTURE behavioral OF oai22x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in4_ipd, in3_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
qn_zd := VitalNAND2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : oai22x2.vhd
-- Description  : 2 wide 2-2 OR-AND-INVERT
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY oai22x2 IS
 GENERIC
 (
  tpd_in1_qn        : VitalDelayType01 := (160.639150 ps, 165.378840 ps);
  tpd_in2_qn        : VitalDelayType01 := (153.558520 ps, 148.522900 ps);
  tpd_in3_qn        : VitalDelayType01 := (136.691720 ps, 142.110310 ps);
  tpd_in4_qn        : VitalDelayType01 := (127.364960 ps, 126.422580 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF oai22x2 : ENTITY IS TRUE;
END oai22x2;

ARCHITECTURE behavioral OF oai22x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE g1_t : std_ulogic;
VARIABLE g2_t : std_ulogic;
VARIABLE qn_zd : std_ulogic;

BEGIN

g1_t := VitalOR2( in4_ipd, in3_ipd );
g2_t := VitalOR2( in2_ipd, in1_ipd );
qn_zd := VitalNAND2( g1_t, g2_t );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_qn),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_qn),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_qn),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or2x1.vhd
-- Description  : 2 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or2x1 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (47.088351 ps, 49.178803 ps);
  tpd_in2_q       : VitalDelayType01 := (59.336772 ps, 58.792494 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or2x1 : ENTITY IS TRUE;
END or2x1;

ARCHITECTURE behavioral OF or2x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or2x2.vhd
-- Description  : 2 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or2x2 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (54.125571 ps, 55.267031 ps);
  tpd_in2_q       : VitalDelayType01 := (66.637503 ps, 64.680154 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or2x2 : ENTITY IS TRUE;
END or2x2;

ARCHITECTURE behavioral OF or2x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or2x4.vhd
-- Description  : 2 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or2x4 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (77.417499 ps, 85.588365 ps);
  tpd_in2_q       : VitalDelayType01 := (89.697374 ps, 94.978789 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or2x4 : ENTITY IS TRUE;
END or2x4;

ARCHITECTURE behavioral OF or2x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or3x1.vhd
-- Description  : 3 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or3x1 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (59.009577 ps, 63.432292 ps);
  tpd_in2_q       : VitalDelayType01 := (74.752655 ps, 81.971591 ps);
  tpd_in3_q       : VitalDelayType01 := (85.185670 ps, 90.981162 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or3x1 : ENTITY IS TRUE;
END or3x1;

ARCHITECTURE behavioral OF or3x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or3x2.vhd
-- Description  : 3 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or3x2 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (63.871469 ps, 71.463965 ps);
  tpd_in2_q       : VitalDelayType01 := (79.678394 ps, 90.655556 ps);
  tpd_in3_q       : VitalDelayType01 := (90.297372 ps, 99.612229 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or3x2 : ENTITY IS TRUE;
END or3x2;

ARCHITECTURE behavioral OF or3x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or3x4.vhd
-- Description  : 3 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or3x4 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (92.209712 ps, 103.644200 ps);
  tpd_in2_q       : VitalDelayType01 := (108.748540 ps, 122.519130 ps);
  tpd_in3_q       : VitalDelayType01 := (121.201050 ps, 131.554690 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or3x4 : ENTITY IS TRUE;
END or3x4;

ARCHITECTURE behavioral OF or3x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or4x1.vhd
-- Description  : 4 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or4x1 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (66.991529 ps, 67.749018 ps);
  tpd_in2_q       : VitalDelayType01 := (86.860851 ps, 96.873597 ps);
  tpd_in3_q       : VitalDelayType01 := (101.327570 ps, 114.504180 ps);
  tpd_in4_q       : VitalDelayType01 := (111.103690 ps, 123.999690 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or4x1 : ENTITY IS TRUE;
END or4x1;

ARCHITECTURE behavioral OF or4x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or4x2.vhd
-- Description  : 4 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or4x2 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (75.844273 ps, 82.016218 ps);
  tpd_in2_q       : VitalDelayType01 := (95.243826 ps, 111.378030 ps);
  tpd_in3_q       : VitalDelayType01 := (110.301330 ps, 129.263640 ps);
  tpd_in4_q       : VitalDelayType01 := (120.902550 ps, 138.656980 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or4x2 : ENTITY IS TRUE;
END or4x2;

ARCHITECTURE behavioral OF or4x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : or4x4.vhd
-- Description  : 4 input OR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY or4x4 IS
 GENERIC
 (
  tpd_in1_q       : VitalDelayType01 := (118.399920 ps, 126.392730 ps);
  tpd_in2_q       : VitalDelayType01 := (140.604300 ps, 155.599100 ps);
  tpd_in3_q       : VitalDelayType01 := (159.329580 ps, 173.102890 ps);
  tpd_in4_q       : VitalDelayType01 := (174.600170 ps, 183.046800 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in4      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  in4        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF or4x4 : ENTITY IS TRUE;
END or4x4;

ARCHITECTURE behavioral OF or4x4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';
SIGNAL in4_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
  VitalWireDelay ( in4_ipd, in4, tipd_in4 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd,in4_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalOR4( in4_ipd, in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE),
 3=>(in4_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in4_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rdffnx1.vhd
-- Description  : BOOL_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rdffnx1 IS
 GENERIC
 (
  tpd_clk_q         : VitalDelayType01 := (177.935807 ps, 193.440704 ps);
  tpd_clk_qn        : VitalDelayType01 := (275.589641 ps, 295.058553 ps);
  tpw_clk_posedge   : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge   : VitalDelayType := 0.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rdffnx1 : ENTITY IS TRUE;
END rdffnx1;

ARCHITECTURE behavioral OF rdffnx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
END BLOCK;

VITALBehavior : PROCESS (d_ipd,clk_ipd,retn_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 11, 1 TO 8) := (
-- clk  d  retn  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  'X',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalPeriodPulseCheck (
  TestSignal     => clk_ipd,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RDFFNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_ipd,d_ipd,retn_ipd,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rdffnx2.vhd
-- Description  : BOOL_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rdffnx2 IS
 GENERIC
 (
  tpd_clk_q         : VitalDelayType01 := (184.147679 ps, 200.975864 ps);
  tpd_clk_qn        : VitalDelayType01 := (314.842417 ps, 290.309574 ps);
  tpw_clk_posedge   : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge   : VitalDelayType := 0.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rdffnx2 : ENTITY IS TRUE;
END rdffnx2;

ARCHITECTURE behavioral OF rdffnx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
END BLOCK;

VITALBehavior : PROCESS (d_ipd,clk_ipd,retn_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 11, 1 TO 8) := (
-- clk  d  retn  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  'X',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalPeriodPulseCheck (
  TestSignal     => clk_ipd,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RDFFNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_ipd,d_ipd,retn_ipd,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rdffx1.vhd
-- Description  : BOOL_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rdffx1 IS
 GENERIC
 (
  tpd_clk_q        : VitalDelayType01 := (157.173818 ps, 181.851134 ps);
  tpd_clk_qn       : VitalDelayType01 := (261.633750 ps, 237.681140 ps);
  tpw_clk_posedge  : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge  : VitalDelayType := 93.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rdffx1 : ENTITY IS TRUE;
END rdffx1;

ARCHITECTURE behavioral OF rdffx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
END BLOCK;

VITALBehavior : PROCESS (d_ipd,clk_ipd,retn_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 11, 1 TO 8) := (
-- clk  d  retn  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  'X',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalPeriodPulseCheck (
  TestSignal     => clk_ipd,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RDFFX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_ipd,d_ipd,retn_ipd,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rdffx2.vhd
-- Description  : BOOL_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rdffx2 IS
 GENERIC
 (
  tpd_clk_q        : VitalDelayType01 := (171.964880 ps, 197.941723 ps);
  tpd_clk_qn       : VitalDelayType01 := (308.171928 ps, 281.387550 ps);
  tpw_clk_posedge  : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge  : VitalDelayType := 91.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rdffx2 : ENTITY IS TRUE;
END rdffx2;

ARCHITECTURE behavioral OF rdffx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
END BLOCK;

VITALBehavior : PROCESS (d_ipd,clk_ipd,retn_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 3);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 11, 1 TO 8) := (
-- clk  d  retn  violation  qn  q  qn  q
 (  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '-',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  'X',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalPeriodPulseCheck (
  TestSignal     => clk_ipd,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RDFFX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_ipd,d_ipd,retn_ipd,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rsdffnx1.vhd
-- Description  : BOOL_SCAN_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rsdffnx1 IS
 GENERIC
 (
  tpd_clk_q               : VitalDelayType01 := (180.000000 ps, 192.563283 ps);
  tpd_clk_qn              : VitalDelayType01 := (274.442002 ps, 294.463255 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 43.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 117.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 0.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_retn_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rsdffnx1 : ENTITY IS TRUE;
END rsdffnx1;

ARCHITECTURE behavioral OF rsdffnx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL retn_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( retn_dly, retn_ipd, tisd_retn_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,retn_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 32, 1 TO 10) := (
-- clk  se  retn  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '0',  '0',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '-',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '-',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '0',  '0',  '0',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '-',  '1',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '-',  '0',  '0',  '1',  '1',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '1',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  'X',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  'X',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '0',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '1',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  '0',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '0',  'X',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  '1',  'X',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_retn_clk  : std_ulogic := '0';
VARIABLE tsuh_retn_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(retn_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /RSDFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => retn_dly,
  TestSignalName => "retn",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_retn_clk_retn_eq_1_noedge_posedge,
  SetupLow      => tsetup_retn_clk_retn_eq_0_noedge_posedge,
  HoldHigh      => thold_retn_clk_retn_eq_1_noedge_posedge,
  HoldLow       => thold_retn_clk_retn_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_retn_clk,
  Violation     => suh_retn_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(retn_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RSDFFNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_retn_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,retn_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rsdffnx2.vhd
-- Description  : BOOL_SCAN_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rsdffnx2 IS
 GENERIC
 (
  tpd_clk_q               : VitalDelayType01 := (181.655059 ps, 196.225909 ps);
  tpd_clk_qn              : VitalDelayType01 := (305.849605 ps, 290.041680 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 51.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 123.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 0.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_retn_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rsdffnx2 : ENTITY IS TRUE;
END rsdffnx2;

ARCHITECTURE behavioral OF rsdffnx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL retn_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( retn_dly, retn_ipd, tisd_retn_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,retn_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 32, 1 TO 10) := (
-- clk  se  retn  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '0',  '0',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '-',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '-',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '0',  '0',  '0',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '-',  '1',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '-',  '0',  '0',  '1',  '1',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '1',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  'X',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  'X',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '0',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '1',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  '0',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '0',  'X',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  '1',  'X',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_retn_clk  : std_ulogic := '0';
VARIABLE tsuh_retn_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(retn_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /RSDFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => retn_dly,
  TestSignalName => "retn",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_retn_clk_retn_eq_1_noedge_posedge,
  SetupLow      => tsetup_retn_clk_retn_eq_0_noedge_posedge,
  HoldHigh      => thold_retn_clk_retn_eq_1_noedge_posedge,
  HoldLow       => thold_retn_clk_retn_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_retn_clk,
  Violation     => suh_retn_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(retn_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RSDFFNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_retn_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,retn_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rsdffx1.vhd
-- Description  : BOOL_SCAN_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rsdffx1 IS
 GENERIC
 (
  tpd_clk_q               : VitalDelayType01 := (157.399893 ps, 182.828550 ps);
  tpd_clk_qn              : VitalDelayType01 := (267.575721 ps, 239.683352 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 158.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 145.000000 ps;
  tsetup_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 110.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 127.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 171.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 95.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_retn_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rsdffx1 : ENTITY IS TRUE;
END rsdffx1;

ARCHITECTURE behavioral OF rsdffx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL retn_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( retn_dly, retn_ipd, tisd_retn_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,retn_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 32, 1 TO 10) := (
-- clk  se  retn  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '0',  '0',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '-',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '-',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '0',  '0',  '0',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '-',  '1',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '-',  '0',  '0',  '1',  '1',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '1',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  'X',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  'X',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '0',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '1',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  '0',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '0',  'X',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  '1',  'X',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_retn_clk  : std_ulogic := '0';
VARIABLE tsuh_retn_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(retn_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /RSDFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => retn_dly,
  TestSignalName => "retn",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_retn_clk_retn_eq_1_noedge_posedge,
  SetupLow      => tsetup_retn_clk_retn_eq_0_noedge_posedge,
  HoldHigh      => thold_retn_clk_retn_eq_1_noedge_posedge,
  HoldLow       => thold_retn_clk_retn_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_retn_clk,
  Violation     => suh_retn_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(retn_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RSDFFX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_retn_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,retn_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : rsdffx2.vhd
-- Description  : BOOL_SCAN_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY rsdffx2 IS
 GENERIC
 (
  tpd_clk_q               : VitalDelayType01 := (172.353301 ps, 200.000000 ps);
  tpd_clk_qn              : VitalDelayType01 := (310.000000 ps, 280.408539 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 154.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 145.000000 ps;
  tsetup_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 111.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 124.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_retn_clk_retn_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 214.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 0.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_retn     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_retn_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  retn       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF rsdffx2 : ENTITY IS TRUE;
END rsdffx2;

ARCHITECTURE behavioral OF rsdffx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL retn_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL retn_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( retn_ipd, retn, tipd_retn );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( retn_dly, retn_ipd, tisd_retn_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,retn_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 32, 1 TO 10) := (
-- clk  se  retn  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '0',  '0',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '-',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '1',  '0',  '-',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '-',  '0',  '1',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '0',  '0',  '0',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '-',  '1',  '0',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '0',  '0',  '-',  '-',  '-',  'S',  'S'),
 (  '-',  '0',  '0',  '1',  '1',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '1',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  'X',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  'X',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '0',  '1',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '0',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  'X',  '0',  '1',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  '0',  'X',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '1',  '-',  '1',  '0',  'S',  'S'),
 (  '\',  '0',  '0',  '0',  'X',  '-',  '0',  '1',  'S',  'S'),
 (  '\',  '0',  '0',  'X',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  'X',  '0',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '0',  '1',  'X',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_retn_clk  : std_ulogic := '0';
VARIABLE tsuh_retn_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(retn_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /RSDFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => retn_dly,
  TestSignalName => "retn",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_retn_clk_retn_eq_1_noedge_posedge,
  SetupLow      => tsetup_retn_clk_retn_eq_0_noedge_posedge,
  HoldHigh      => thold_retn_clk_retn_eq_1_noedge_posedge,
  HoldLow       => thold_retn_clk_retn_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_retn_clk,
  Violation     => suh_retn_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(retn_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /RSDFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /RSDFFX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_retn_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,retn_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffarx1.vhd
-- Description  : SCAN_DFF with rising edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffarx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (158.315470 ps, 139.039000 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (209.305640 ps, 228.720990 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 59.870033 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (215.630970 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 180.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 198.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 218.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 207.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 172.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 192.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 141.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 108.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 219.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 105.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffarx1 : ENTITY IS TRUE;
END sdffarx1;

ARCHITECTURE behavioral OF sdffarx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffarx2.vhd
-- Description  : SCAN_DFF with rising edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffarx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (165.737080 ps, 158.540680 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (263.964020 ps, 268.845290 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 73.488307 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (225.031980 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 173.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 199.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 219.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 201.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 166.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 194.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 135.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 126.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 219.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 135.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffarx2 : ENTITY IS TRUE;
END sdffarx2;

ARCHITECTURE behavioral OF sdffarx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffasrsx1.vhd
-- Description  : SCAN_DFF with rising edge clock,low preset,low clear,2 * q and 1 * qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffasrsx1 IS
 GENERIC
 (
  tpd_rstb_s0                        : VitalDelayType01 := (88.187993 ps, 82.993329 ps);
  tpd_rstb_q                         : VitalDelayType01 := (86.754923 ps, 81.522754 ps);
  tpd_clk_s0_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (293.765070 ps, 299.785830 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (192.734720 ps, 192.903600 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (292.243400 ps, 298.287460 ps);
  tpd_setb_qn                        : VitalDelayType01 := (151.305350 ps, 202.433260 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (259.011180 ps, 1.000000 ps);
  tpd_setb_s0_rstb_eq_1              : VitalDelayType01 := (313.025890 ps, 1.000000 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (311.421480 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 156.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 217.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 231.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 184.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 159.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 206.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 103.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 142.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 143.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 225.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 270.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 144.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic;
  s0         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffasrsx1 : ENTITY IS TRUE;
END sdffasrsx1;

ARCHITECTURE behavioral OF sdffasrsx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE s0_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 2) := (OTHERS=>'X');
ALIAS s0_zd : std_logic IS Res(0);
ALIAS qn_zd : std_logic IS Res(1);
ALIAS q_zd : std_logic IS Res(2);

CONSTANT StateTab : VitalStateTableType (1 TO 23, 1 TO 13) := (
-- rstb  setb  clk  se  d  si  violation  s0  qn  q  s0  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  '-',  'X',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'B',  'S',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '0',  'X'),
 (  '1',  'X',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  'X',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '-',  '-',  '1',  '0',  '1',  'S',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  '1',  'S',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  'X',  '0'),
 (  'X',  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  'X',  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0',  'S',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '-',  '-',  '0',  '1',  '0',  'S',  'S',  'S'),
 (  '1',  '1',  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFASRSX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFASRSX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFASRSX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 3,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (s0, s0_GlitchData, "s0", s0_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_s0),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_s0_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_s0_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffasrsx2.vhd
-- Description  : SCAN_DFF with rising edge clock,low preset,low clear,2 * q and 1 * qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffasrsx2 IS
 GENERIC
 (
  tpd_rstb_s0                        : VitalDelayType01 := (112.482300 ps, 118.098310 ps);
  tpd_rstb_q                         : VitalDelayType01 := (113.907640 ps, 119.493620 ps);
  tpd_clk_s0_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (362.913490 ps, 375.135540 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (203.758380 ps, 206.945270 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (364.429000 ps, 376.636070 ps);
  tpd_setb_s0_rstb_eq_1              : VitalDelayType01 := (418.168010 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (166.693670 ps, 242.605420 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (419.782140 ps, 1.000000 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (278.256140 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 156.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 221.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 234.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 184.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 160.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 209.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 99.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 137.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 185.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 228.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 368.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 217.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic;
  s0         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffasrsx2 : ENTITY IS TRUE;
END sdffasrsx2;

ARCHITECTURE behavioral OF sdffasrsx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE s0_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 2) := (OTHERS=>'X');
ALIAS s0_zd : std_logic IS Res(0);
ALIAS qn_zd : std_logic IS Res(1);
ALIAS q_zd : std_logic IS Res(2);

CONSTANT StateTab : VitalStateTableType (1 TO 23, 1 TO 13) := (
-- rstb  setb  clk  se  d  si  violation  s0  qn  q  s0  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  '-',  'X',  'X',  'X'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'B',  'S',  'S',  'S'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '0',  'X'),
 (  '1',  'X',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  'X',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  '1'),
 (  '1',  'X',  '0',  '-',  '-',  '-',  '-',  '1',  '0',  '1',  'S',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  '1',  'S',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  'X',  '0'),
 (  'X',  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  'X',  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  'X',  '1',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0',  'S',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '-',  '-',  '0',  '1',  '0',  'S',  'S',  'S'),
 (  '1',  '1',  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  '0'),
 (  '1',  '1',  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRSX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFASRSX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFASRSX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFASRSX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,setb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 3,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (s0, s0_GlitchData, "s0", s0_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_s0),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_s0_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_s0_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffasrx1.vhd
-- Description  : SCAN_DFF with rising edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffasrx1 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (66.175372 ps, 63.659886 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (193.572340 ps, 193.956440 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (269.047830 ps, 276.824360 ps);
  tpd_setb_qn                        : VitalDelayType01 := (151.022460 ps, 202.507750 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (258.011800 ps, 1.000000 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (285.531810 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 155.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 217.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 230.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 183.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 158.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 205.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 103.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 142.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 138.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 225.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 255.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 120.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffasrx1 : ENTITY IS TRUE;
END sdffasrx1;

ARCHITECTURE behavioral OF sdffasrx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 23, 1 TO 11) := (
-- setb  rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '0',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  '1',  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffasrx2.vhd
-- Description  : SCAN_DFF with rising edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffasrx2 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (76.455886 ps, 74.364587 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (206.297890 ps, 210.822120 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (326.463370 ps, 323.574970 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (378.423540 ps, 1.000000 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (276.888480 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (167.557630 ps, 245.147070 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 155.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 220.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 233.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 183.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 158.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 208.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 101.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 138.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 169.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 228.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 345.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 154.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffasrx2 : ENTITY IS TRUE;
END sdffasrx2;

ARCHITECTURE behavioral OF sdffasrx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 23, 1 TO 11) := (
-- setb  rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '/',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '/',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '0',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  '/',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '/',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '0',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  '1',  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffasx1.vhd
-- Description  : SCAN_DFF with rising edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffasx1 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (179.521850 ps, 175.684670 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (243.595060 ps, 245.301250 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 204.642770 ps);
  tpd_setb_q                         : VitalDelayType01 := (272.672180 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 168.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 167.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 187.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 197.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 161.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 162.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 67.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 126.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 189.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 244.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffasx1 : ENTITY IS TRUE;
END sdffasx1;

ARCHITECTURE behavioral OF sdffasx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- setb  se  clk  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '/',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '/',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '0',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  'X',  '/',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '/',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '0',  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '/',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '-',  '0',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '-',  'S',  '-',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,se_dly,clk_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffasx2.vhd
-- Description  : SCAN_DFF with rising edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffasx2 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (182.217950 ps, 192.175770 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (294.469480 ps, 299.196630 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 227.714040 ps);
  tpd_setb_q                         : VitalDelayType01 := (341.906680 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 165.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 172.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 193.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 195.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 158.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 167.000000 ps;
  trecovery_setb_clk_posedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 60.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 152.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 198.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 312.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffasx2 : ENTITY IS TRUE;
END sdffasx2;

ARCHITECTURE behavioral OF sdffasx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- setb  se  clk  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '/',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '/',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '/',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '0',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  'X',  '/',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '/',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '0',  '/',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '/',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '-',  '0',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '-',  'S',  '-',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,se_dly,clk_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnarx1.vhd
-- Description  : SCAN_DFF with falling edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnarx1 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (176.620290 ps, 196.708430 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (259.731890 ps, 255.687810 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 72.400814 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (220.421320 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 81.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 197.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 219.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 107.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 73.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 192.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 242.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 184.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 147.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 146.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnarx1 : ENTITY IS TRUE;
END sdffnarx1;

ARCHITECTURE behavioral OF sdffnarx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  '\',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFNARX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnarx2.vhd
-- Description  : SCAN_DFF with falling edge clock,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnarx2 IS
 GENERIC
 (
  tpd_clk_qn_rstb_eq_1               : VitalDelayType01 := (199.590000 ps, 211.806790 ps);
  tpd_clk_q_rstb_eq_1                : VitalDelayType01 := (301.131330 ps, 288.898820 ps);
  tpd_rstb_q                         : VitalDelayType01 := (1.000000 ps, 57.744028 ps);
  tpd_rstb_qn                        : VitalDelayType01 := (191.242130 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 118.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 98.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 124.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 132.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 111.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 95.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 207.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 225.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 95.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 108.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnarx2 : ENTITY IS TRUE;
END sdffnarx2;

ARCHITECTURE behavioral OF sdffnarx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  '\',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '\',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  'X',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNARX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFNARX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_rstb_clk OR pw_clk OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1),(To_X01(rstb_dly)/='0')),
 1=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnasrx1.vhd
-- Description  : SCAN_DFF with falling edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnasrx1 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (65.641215 ps, 72.479636 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (212.290620 ps, 225.349910 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (298.284820 ps, 307.938750 ps);
  tpd_setb_qn                        : VitalDelayType01 := (154.025580 ps, 162.369130 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (239.816560 ps, 1.000000 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (260.202680 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 92.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 224.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 222.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 119.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 85.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 194.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 87.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 239.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 226.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 153.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 177.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 162.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnasrx1 : ENTITY IS TRUE;
END sdffnasrx1;

ARCHITECTURE behavioral OF sdffnasrx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 23, 1 TO 11) := (
-- setb  rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '\',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '\',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  '1',  '\',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFNASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFNASRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnasrx2.vhd
-- Description  : SCAN_DFF with falling edge clock,low preset,low clear,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnasrx2 IS
 GENERIC
 (
  tpd_rstb_q                         : VitalDelayType01 := (83.608395 ps, 53.211504 ps);
  tpd_clk_qn_rstb_eq_1_an_setb_eq_1  : VitalDelayType01 := (225.689440 ps, 244.675180 ps);
  tpd_clk_q_rstb_eq_1_an_setb_eq_1   : VitalDelayType01 := (325.951600 ps, 333.057710 ps);
  tpd_setb_qn                        : VitalDelayType01 := (160.909280 ps, 152.784130 ps);
  tpd_setb_q_rstb_eq_1               : VitalDelayType01 := (235.416210 ps, 1.000000 ps);
  tpd_rstb_qn_setb_eq_1              : VitalDelayType01 := (231.927470 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 112.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 105.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 122.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 124.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 103.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 92.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  trecovery_rstb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 92.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_negedge : VitalDelayType := 212.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 261.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 99.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 146.000000 ps;
  tpw_rstb_negedge                   : VitalDelayType := 125.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnasrx2 : ENTITY IS TRUE;
END sdffnasrx2;

ARCHITECTURE behavioral OF sdffnasrx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,rstb_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 23, 1 TO 11) := (
-- setb  rstb  clk  se  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '0',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '0'),
 (  '0',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '1',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '1',  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '0',  'X',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  'X'),
 (  'X',  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '0'),
 (  'X',  '1',  '\',  '0',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '\',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '1',  'S',  '-',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '1',  'X',  '\',  '0',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '\',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '1',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  'X',  'S',  '-',  '-',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '1',  '1',  '\',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;
VARIABLE pw_rstb    : std_ulogic := '0';
VARIABLE tpw_rstb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(rstb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_rstb_clk_posedge_negedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1') and (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFNASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(rstb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => rstb_dly,
  TestSignalName => "rstb",
  PulseWidthLow  => tpw_rstb_negedge,
  PeriodData     => tpw_rstb,
  Violation      => pw_rstb,
  HeaderMsg      => InstancePath & " /SDFFNASRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR suh_rstb_clk OR pw_clk OR pw_setb OR pw_rstb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,rstb_dly,clk_dly,se_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_q),TRUE),
 1=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 2=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q_rstb_eq_1),(To_X01(rstb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_rstb_eq_1_an_setb_eq_1),(To_X01(rstb_dly)/='0') and (To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE),
 2=>(rstb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_rstb_qn_setb_eq_1),(To_X01(setb_dly)/='0'))),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnasx1.vhd
-- Description  : SCAN_DFF with falling edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnasx1 IS
 GENERIC
 (
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (232.508230 ps, 263.690650 ps);
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (191.804230 ps, 185.692770 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 100.734740 ps);
  tpd_setb_q                         : VitalDelayType01 := (150.065560 ps, 1.000000 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 16.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 140.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 156.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 41.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 13.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 135.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 1.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 56.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 207.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 96.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 90.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnasx1 : ENTITY IS TRUE;
END sdffnasx1;

ARCHITECTURE behavioral OF sdffnasx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- setb  se  clk  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '\',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '\',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '\',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '1',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  'X',  '\',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '\',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '0',  '\',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '\',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '-',  '1',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '-',  'S',  '-',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFNASX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,se_dly,clk_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnasx2.vhd
-- Description  : SCAN_DFF with falling edge clock,low preset,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnasx2 IS
 GENERIC
 (
  tpd_clk_qn_setb_eq_1               : VitalDelayType01 := (201.143080 ps, 219.200820 ps);
  tpd_clk_q_setb_eq_1                : VitalDelayType01 := (282.793570 ps, 273.426500 ps);
  tpd_setb_q                         : VitalDelayType01 := (189.109040 ps, 1.000000 ps);
  tpd_setb_qn                        : VitalDelayType01 := (1.000000 ps, 125.483790 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 45.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 74.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 92.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 59.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 40.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 69.000000 ps;
  trecovery_setb_clk_posedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge  : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_negedge : VitalDelayType := 65.000000 ps;
  tpw_clk_negedge                    : VitalDelayType := 228.000000 ps;
  tpw_clk_posedge                    : VitalDelayType := 82.000000 ps;
  tpw_setb_negedge                   : VitalDelayType := 107.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  setb       : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnasx2 : ENTITY IS TRUE;
END sdffnasx2;

ARCHITECTURE behavioral OF sdffnasx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,setb_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 5);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 15, 1 TO 10) := (
-- setb  se  clk  d  si  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '1',  '0',  '\',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '0',  '\',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '1',  '\',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  '1',  '\',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '1',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '1',  '-',  'S',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '1',  'X',  '\',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '1',  'X',  '\',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '0',  '\',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '1',  '\',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  'X',  '-',  '1',  '-',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  'X',  '-',  'S',  '-',  '-',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;
VARIABLE pw_setb    : std_ulogic := '0';
VARIABLE tpw_setb   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => trecovery_setb_clk_posedge_negedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNASX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => (To_X01(setb_dly)='1')
  );
 VitalPeriodPulseCheck (
  TestSignal     => setb_dly,
  TestSignalName => "setb",
  PulseWidthLow  => tpw_setb_negedge,
  PeriodData     => tpw_setb,
  Violation      => pw_setb,
  HeaderMsg      => InstancePath & " /SDFFNASX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR suh_setb_clk OR pw_clk OR pw_setb;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (setb_dly,se_dly,clk_dly,d_dly,si_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn_setb_eq_1),(To_X01(setb_dly)/='0')),
 1=>(setb_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_setb_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnx1.vhd
-- Description  : SCAN_DFF with falling edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnx1 IS
 GENERIC
 (
  tpd_clk_qn            : VitalDelayType01 := (178.582600 ps, 194.021820 ps);
  tpd_clk_q             : VitalDelayType01 := (244.873740 ps, 245.565700 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 58.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 181.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 200.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 84.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 50.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 174.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 185.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 94.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnx1 : ENTITY IS TRUE;
END sdffnx1;

ARCHITECTURE behavioral OF sdffnx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 9) := (
-- clk  se  si  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '0',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '0',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,si_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffnx2.vhd
-- Description  : SCAN_DFF with falling edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffnx2 IS
 GENERIC
 (
  tpd_clk_qn            : VitalDelayType01 := (195.718430 ps, 206.867510 ps);
  tpd_clk_q             : VitalDelayType01 := (280.960470 ps, 270.582880 ps);
  tsetup_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 76.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 104.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 126.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 91.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 67.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 100.000000 ps;
  thold_si_clk_si_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_negedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_negedge : VitalDelayType := 0.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 214.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 86.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffnx2 : ENTITY IS TRUE;
END sdffnx2;

ARCHITECTURE behavioral OF sdffnx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 9) := (
-- clk  se  si  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '\',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '\',  '0',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  '0',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '1',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '\',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '\',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_negedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_negedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_negedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='1'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_negedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_negedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_negedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_negedge,
  CheckEnabled  => TRUE,
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_negedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_negedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_negedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_negedge,
  CheckEnabled  => (To_X01(se_dly)='0'),
  RefTransition => '\',
  HeaderMsg     => InstancePath & " /SDFFNX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFNX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,si_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffssrx1.vhd
-- Description  : SCAN_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffssrx1 IS
 GENERIC
 (
  tpd_clk_qn              : VitalDelayType01 := (155.603922 ps, 156.620045 ps);
  tpd_clk_q               : VitalDelayType01 := (194.844727 ps, 196.133037 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 281.000000 ps;
  tsetup_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 245.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 94.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 191.000000 ps;
  tsetup_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 269.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 181.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 235.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 108.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 193.000000 ps;
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_d_clk    : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  clk        : IN         std_logic;
  d          : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  si         : IN         std_logic;
  se         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffssrx1 : ENTITY IS TRUE;
END sdffssrx1;

ARCHITECTURE behavioral OF sdffssrx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( si_ipd, si, tipd_si );
  VitalWireDelay ( se_ipd, se, tipd_se );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
END BLOCK;

VITALBehavior : PROCESS (clk_dly,d_dly,rstb_dly,setb_dly,si_dly,se_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 26, 1 TO 11) := (
-- clk  se  rstb  setb  si  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '0',  '-',  '0',  '0',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '-',  '-',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '0',  '-',  '1',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '-',  '0',  '1',  '0',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '/',  '0',  '1',  'X',  '0',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '0',  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '1',  '0',  'X',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  'X',  '0',  '1',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  'X',  '1',  '0',  '1',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '0',  '1',  'X',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '0',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '1',  'X',  '1',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '0',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '1',  'X',  '1',  '1',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_setb_clk_setb_eq_1_noedge_posedge,
  SetupLow      => tsetup_setb_clk_setb_eq_0_noedge_posedge,
  HoldHigh      => thold_setb_clk_setb_eq_1_noedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_rstb_clk_rstb_eq_1_noedge_posedge,
  SetupLow      => tsetup_rstb_clk_rstb_eq_0_noedge_posedge,
  HoldHigh      => thold_rstb_clk_rstb_eq_1_noedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFSSRX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_setb_clk OR suh_se_clk OR suh_rstb_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,rstb_dly,setb_dly,si_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffssrx2.vhd
-- Description  : SCAN_DFF with rising clock  q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffssrx2 IS
 GENERIC
 (
  tpd_clk_qn              : VitalDelayType01 := (165.315548 ps, 184.557645 ps);
  tpd_clk_q               : VitalDelayType01 := (243.407992 ps, 227.958916 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 279.000000 ps;
  tsetup_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 237.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 88.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 100.000000 ps;
  tsetup_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 184.000000 ps;
  tsetup_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 265.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 174.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 235.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_setb_clk_setb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_setb_clk_setb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 2000.000000 ps;
  thold_rstb_clk_rstb_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_rstb_clk_rstb_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge         : VitalDelayType := 147.000000 ps;
  tpw_clk_negedge         : VitalDelayType := 178.000000 ps;
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_rstb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_setb     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_d_clk    : VitalDelayType := 0 ps;
  tisd_rstb_clk : VitalDelayType := 0 ps;
  tisd_setb_clk : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  clk        : IN         std_logic;
  d          : IN         std_logic;
  rstb       : IN         std_logic;
  setb       : IN         std_logic;
  si         : IN         std_logic;
  se         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffssrx2 : ENTITY IS TRUE;
END sdffssrx2;

ARCHITECTURE behavioral OF sdffssrx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL clk_ipd         : std_logic :='X';
SIGNAL d_ipd           : std_logic :='X';
SIGNAL rstb_ipd        : std_logic :='X';
SIGNAL setb_ipd        : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL rstb_dly        : std_logic :='X';
SIGNAL setb_dly        : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( rstb_ipd, rstb, tipd_rstb );
  VitalWireDelay ( setb_ipd, setb, tipd_setb );
  VitalWireDelay ( si_ipd, si, tipd_si );
  VitalWireDelay ( se_ipd, se, tipd_se );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( rstb_dly, rstb_ipd, tisd_rstb_clk );
  VitalSignalDelay ( setb_dly, setb_ipd, tisd_setb_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
END BLOCK;

VITALBehavior : PROCESS (clk_dly,d_dly,rstb_dly,setb_dly,si_dly,se_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 6);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 26, 1 TO 11) := (
-- clk  se  rstb  setb  si  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '0',  '-',  '0',  '0',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '1',  '-',  '-',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '-',  '-',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '0',  '-',  '1',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '1',  '1',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '-',  '0',  '0',  '1',  '0',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '-',  '0',  '1',  '0',  '1',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '/',  '0',  '1',  'X',  '0',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '0',  'X',  '0',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '1',  '0',  'X',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  'X',  '0',  '1',  '0',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  'X',  '1',  '1',  '1',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  'X',  '1',  '0',  '1',  '-',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '1',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '0',  '1',  'X',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '0',  '1',  '-',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '0',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  '1',  'X',  '1',  '0',  '-',  '1',  '0',  'S',  'S'),
 (  '/',  '0',  'X',  '1',  '0',  '1',  '-',  '0',  '1',  'S',  'S'),
 (  '/',  '0',  '1',  'X',  '1',  '1',  '-',  '0',  '1',  'S',  'S')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_setb_clk  : std_ulogic := '0';
VARIABLE tsuh_setb_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_rstb_clk  : std_ulogic := '0';
VARIABLE tsuh_rstb_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => setb_dly,
  TestSignalName => "setb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_setb_clk_setb_eq_1_noedge_posedge,
  SetupLow      => tsetup_setb_clk_setb_eq_0_noedge_posedge,
  HoldHigh      => thold_setb_clk_setb_eq_1_noedge_posedge,
  HoldLow       => thold_setb_clk_setb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_setb_clk,
  Violation     => suh_setb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => rstb_dly,
  TestSignalName => "rstb",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_rstb_clk_rstb_eq_1_noedge_posedge,
  SetupLow      => tsetup_rstb_clk_rstb_eq_0_noedge_posedge,
  HoldHigh      => thold_rstb_clk_rstb_eq_1_noedge_posedge,
  HoldLow       => thold_rstb_clk_rstb_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_rstb_clk,
  Violation     => suh_rstb_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(setb_dly)='1') and (To_X01(se_dly)='0') and (To_X01(rstb_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFSSRX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFSSRX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_setb_clk OR suh_se_clk OR suh_rstb_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,rstb_dly,setb_dly,si_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffx1.vhd
-- Description  : SCAN_DFF with rising edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffx1 IS
 GENERIC
 (
  tpd_clk_qn            : VitalDelayType01 := (150.815820 ps, 132.445360 ps);
  tpd_clk_q             : VitalDelayType01 := (184.615310 ps, 206.602880 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 133.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 155.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 175.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 160.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 126.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 148.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 101.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 171.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffx1 : ENTITY IS TRUE;
END sdffx1;

ARCHITECTURE behavioral OF sdffx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 9) := (
-- clk  se  si  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFX1",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFX1",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,si_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : sdffx2.vhd
-- Description  : SCAN_DFF with rising edge clock,q and qb outputs
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY sdffx2 IS
 GENERIC
 (
  tpd_clk_qn            : VitalDelayType01 := (155.058100 ps, 148.347810 ps);
  tpd_clk_q             : VitalDelayType01 := (230.276050 ps, 248.050200 ps);
  tsetup_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 133.000000 ps;
  tsetup_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 160.000000 ps;
  tsetup_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 180.000000 ps;
  tsetup_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 160.000000 ps;
  tsetup_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 126.000000 ps;
  tsetup_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 153.000000 ps;
  thold_si_clk_si_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_si_clk_si_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_se_clk_se_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_1_noedge_posedge : VitalDelayType := 0.000000 ps;
  thold_d_clk_d_eq_0_noedge_posedge : VitalDelayType := 0.000000 ps;
  tpw_clk_posedge       : VitalDelayType := 116.000000 ps;
  tpw_clk_negedge       : VitalDelayType := 181.000000 ps;
  tipd_d        : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_clk      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_se       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_si       : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tisd_d_clk    : VitalDelayType := 0 ps;
  ticd_clk      : VitalDelayType := 0 ps;
  tisd_se_clk   : VitalDelayType := 0 ps;
  tisd_si_clk   : VitalDelayType := 0 ps;
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  d          : IN         std_logic;
  clk        : IN         std_logic;
  se         : IN         std_logic;
  si         : IN         std_logic;
  q          : OUT        std_logic;
  qn         : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF sdffx2 : ENTITY IS TRUE;
END sdffx2;

ARCHITECTURE behavioral OF sdffx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL d_ipd           : std_logic :='X';
SIGNAL clk_ipd         : std_logic :='X';
SIGNAL se_ipd          : std_logic :='X';
SIGNAL si_ipd          : std_logic :='X';
SIGNAL d_dly           : std_logic :='X';
SIGNAL clk_dly         : std_logic :='X';
SIGNAL se_dly          : std_logic :='X';
SIGNAL si_dly          : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( d_ipd, d, tipd_d );
  VitalWireDelay ( clk_ipd, clk, tipd_clk );
  VitalWireDelay ( se_ipd, se, tipd_se );
  VitalWireDelay ( si_ipd, si, tipd_si );
END BLOCK;

SIGNALDELAY : BLOCK
BEGIN
  VitalSignalDelay ( d_dly, d_ipd, tisd_d_clk );
  VitalSignalDelay ( clk_dly, clk_ipd, ticd_clk );
  VitalSignalDelay ( se_dly, se_ipd, tisd_se_clk );
  VitalSignalDelay ( si_dly, si_ipd, tisd_si_clk );
END BLOCK;

VITALBehavior : PROCESS (d_dly,clk_dly,se_dly,si_dly)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE qn_GlitchData : VitalGlitchDataType;
VARIABLE Prv : std_logic_vector(0 TO 4);
VARIABLE Res : std_logic_vector(0 TO 1) := (OTHERS=>'X');
ALIAS qn_zd : std_logic IS Res(0);
ALIAS q_zd : std_logic IS Res(1);

CONSTANT StateTab : VitalStateTableType (1 TO 10, 1 TO 9) := (
-- clk  se  si  d  violation  qn  q  qn  q
 (  '-',  '-',  '-',  '-',  'X',  '-',  '-',  'X',  'X'),
 (  '/',  '1',  '0',  '-',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '1',  '1',  '-',  '-',  '-',  '-',  '0',  '1'),
 (  '/',  '0',  '-',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  '0',  '-',  '1',  '-',  '-',  '-',  '0',  '1'),
 (  '0',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'S',  '-',  '-',  '-',  '-',  '-',  '-',  'S',  'S'),
 (  'B',  'B',  'B',  'B',  '-',  'B',  'B',  'S',  'S'),
 (  '/',  'X',  '0',  '0',  '-',  '-',  '-',  '1',  '0'),
 (  '/',  'X',  '1',  '1',  '-',  '-',  '-',  '0',  '1')
);
VARIABLE violation : std_ulogic := '0';
VARIABLE suh_si_clk  : std_ulogic := '0';
VARIABLE tsuh_si_clk : VitalTimingDataType;
VARIABLE suh_se_clk  : std_ulogic := '0';
VARIABLE tsuh_se_clk : VitalTimingDataType;
VARIABLE suh_d_clk  : std_ulogic := '0';
VARIABLE tsuh_d_clk : VitalTimingDataType;
VARIABLE pw_clk    : std_ulogic := '0';
VARIABLE tpw_clk   : VitalPeriodDataType;


BEGIN

-- TIMING CHECKS --
IF (TimingChecksOn) THEN
 VitalSetupHoldCheck (
  TestSignal    => si_dly,
  TestSignalName => "si",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_si_clk_si_eq_1_noedge_posedge,
  SetupLow      => tsetup_si_clk_si_eq_0_noedge_posedge,
  HoldHigh      => thold_si_clk_si_eq_1_noedge_posedge,
  HoldLow       => thold_si_clk_si_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='1'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_si_clk,
  Violation     => suh_si_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => se_dly,
  TestSignalName => "se",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_se_clk_se_eq_1_noedge_posedge,
  SetupLow      => tsetup_se_clk_se_eq_0_noedge_posedge,
  HoldHigh      => thold_se_clk_se_eq_1_noedge_posedge,
  HoldLow       => thold_se_clk_se_eq_0_noedge_posedge,
  CheckEnabled  => TRUE,
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_se_clk,
  Violation     => suh_se_clk
 );
 VitalSetupHoldCheck (
  TestSignal    => d_dly,
  TestSignalName => "d",
  RefSignal     => clk_dly,
  RefSignalName => "clk",
  SetupHigh     => tsetup_d_clk_d_eq_1_noedge_posedge,
  SetupLow      => tsetup_d_clk_d_eq_0_noedge_posedge,
  HoldHigh      => thold_d_clk_d_eq_1_noedge_posedge,
  HoldLow       => thold_d_clk_d_eq_0_noedge_posedge,
  CheckEnabled  => (To_X01(se_dly)='0'),
  RefTransition => '/',
  HeaderMsg     => InstancePath & " /SDFFX2",
  XOn           => XOn,
  MsgOn         => MsgOn,
  TimingData    => tsuh_d_clk,
  Violation     => suh_d_clk
 );
 VitalPeriodPulseCheck (
  TestSignal     => clk_dly,
  TestSignalName => "clk",
  PulseWidthHigh => tpw_clk_posedge,
  PulseWidthLow  => tpw_clk_negedge,
  PeriodData     => tpw_clk,
  Violation      => pw_clk,
  HeaderMsg      => InstancePath & " /SDFFX2",
  XOn            => XOn,
  MsgOn          => MsgOn,
  CheckEnabled   => TRUE
  );
END IF;

violation := suh_si_clk OR suh_se_clk OR suh_d_clk OR pw_clk;


VitalStateTable ( StateTable => StateTab,
                      DataIn => (clk_dly,se_dly,si_dly,d_dly,violation),
                   NumStates => 2,
                      Result => Res,
              PreviousDataIn => Prv
              );
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
VitalPathDelay01Z (qn, qn_GlitchData, "qn", qn_zd,
 Paths=>(0=>(clk_dly'LAST_EVENT,VitalExtendToFillDelay(tpd_clk_qn),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : tnbuffhx16.vhd
-- Description  : TRISTATE BUFFER with active high enable
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY tnbuffhx16 IS
 GENERIC
 (
  tpd_enb_q            : VitalDelayType01Z := (1.000000 ps, 1.000000 ps, 78.472028 ps, 52.241819 ps, 80.055046 ps, 59.691220 ps);
  tpd_inpp_q           : VitalDelayType01Z := (100.956849 ps, 93.563337 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  enb        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF tnbuffhx16 : ENTITY IS TRUE;
END tnbuffhx16;

ARCHITECTURE behavioral OF tnbuffhx16 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';
SIGNAL enb_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd,enb_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalBufIf1(	Data=>( inpp_ipd ),
				Enable=>( enb_ipd ));
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE),
 1=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : tnbuffhx1.vhd
-- Description  : TRISTATE BUFFER with active high enable
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY tnbuffhx1 IS
 GENERIC
 (
  tpd_enb_q           : VitalDelayType01Z := (1.000000 ps, 1.000000 ps, 54.996085 ps, 37.213157 ps, 38.103951 ps, 55.461031 ps);
  tpd_inpp_q          : VitalDelayType01Z := (73.949689 ps, 68.375390 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  enb        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF tnbuffhx1 : ENTITY IS TRUE;
END tnbuffhx1;

ARCHITECTURE behavioral OF tnbuffhx1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';
SIGNAL enb_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd,enb_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalBufIf1(	Data=>( inpp_ipd ),
				Enable=>( enb_ipd ));
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE),
 1=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : tnbuffhx2.vhd
-- Description  : TRISTATE BUFFER with active high enable
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY tnbuffhx2 IS
 GENERIC
 (
  tpd_enb_q           : VitalDelayType01Z := (1.000000 ps, 1.000000 ps, 58.597490 ps, 35.452775 ps, 47.583490 ps, 49.518060 ps);
  tpd_inpp_q          : VitalDelayType01Z := (75.856391 ps, 69.045827 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  enb        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF tnbuffhx2 : ENTITY IS TRUE;
END tnbuffhx2;

ARCHITECTURE behavioral OF tnbuffhx2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';
SIGNAL enb_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd,enb_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalBufIf1(	Data=>( inpp_ipd ),
				Enable=>( enb_ipd ));
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE),
 1=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : tnbuffhx32.vhd
-- Description  : TRISTATE BUFFER with active high enable
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY tnbuffhx32 IS
 GENERIC
 (
  tpd_enb_q            : VitalDelayType01Z := (1.000000 ps, 1.000000 ps, 101.053948 ps, 55.037034 ps, 82.813422 ps, 72.619757 ps);
  tpd_inpp_q           : VitalDelayType01Z := (99.781023 ps, 93.920614 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  enb        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF tnbuffhx32 : ENTITY IS TRUE;
END tnbuffhx32;

ARCHITECTURE behavioral OF tnbuffhx32 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';
SIGNAL enb_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd,enb_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalBufIf1(	Data=>( inpp_ipd ),
				Enable=>( enb_ipd ));
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE),
 1=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : tnbuffhx4.vhd
-- Description  : TRISTATE BUFFER with active high enable
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY tnbuffhx4 IS
 GENERIC
 (
  tpd_enb_q           : VitalDelayType01Z := (1.000000 ps, 1.000000 ps, 61.039555 ps, 38.923108 ps, 53.498388 ps, 49.561519 ps);
  tpd_inpp_q          : VitalDelayType01Z := (78.090994 ps, 70.983746 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  enb        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF tnbuffhx4 : ENTITY IS TRUE;
END tnbuffhx4;

ARCHITECTURE behavioral OF tnbuffhx4 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';
SIGNAL enb_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd,enb_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalBufIf1(	Data=>( inpp_ipd ),
				Enable=>( enb_ipd ));
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE),
 1=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : tnbuffhx8.vhd
-- Description  : TRISTATE BUFFER with active high enable
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY tnbuffhx8 IS
 GENERIC
 (
  tpd_enb_q           : VitalDelayType01Z := (1.000000 ps, 1.000000 ps, 72.106082 ps, 51.652574 ps, 81.551377 ps, 56.102933 ps);
  tpd_inpp_q          : VitalDelayType01Z := (105.968359 ps, 98.273783 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps, 1.000000 ps);
  tipd_inpp     : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_enb      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  inpp       : IN         std_logic;
  enb        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF tnbuffhx8 : ENTITY IS TRUE;
END tnbuffhx8;

ARCHITECTURE behavioral OF tnbuffhx8 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL inpp_ipd        : std_logic :='X';
SIGNAL enb_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( inpp_ipd, inpp, tipd_inpp );
  VitalWireDelay ( enb_ipd, enb, tipd_enb );
END BLOCK;

VITALBehavior : PROCESS (inpp_ipd,enb_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN

q_zd := VitalBufIf1(	Data=>( inpp_ipd ),
				Enable=>( enb_ipd ));
--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(enb_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_enb_q),TRUE),
 1=>(inpp_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_inpp_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xnor2x1.vhd
-- Description  : 2 input XNOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xnor2x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (114.432510 ps, 97.452195 ps);
  tpd_in2_q         : VitalDelayType01 := (119.048690 ps, 105.396400 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xnor2x1 : ENTITY IS TRUE;
END xnor2x1;

ARCHITECTURE behavioral OF xnor2x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd :=  VitalXNOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xnor2x2.vhd
-- Description  : 2 input XNOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xnor2x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (124.275000 ps, 107.809720 ps);
  tpd_in2_q         : VitalDelayType01 := (130.507800 ps, 116.823780 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xnor2x2 : ENTITY IS TRUE;
END xnor2x2;

ARCHITECTURE behavioral OF xnor2x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd :=  VitalXNOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xnor3x1.vhd
-- Description  : 3 input XNOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xnor3x1 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (208.058610 ps, 209.511680 ps);
  tpd_in2_q         : VitalDelayType01 := (210.986120 ps, 210.136920 ps);
  tpd_in3_q         : VitalDelayType01 := (78.113600 ps, 83.270008 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xnor3x1 : ENTITY IS TRUE;
END xnor3x1;

ARCHITECTURE behavioral OF xnor3x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd :=  VitalXNOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xnor3x2.vhd
-- Description  : 3 input XNOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xnor3x2 IS
 GENERIC
 (
  tpd_in1_q         : VitalDelayType01 := (226.699820 ps, 240.142560 ps);
  tpd_in2_q         : VitalDelayType01 := (229.858620 ps, 241.112980 ps);
  tpd_in3_q         : VitalDelayType01 := (94.267784 ps, 102.938580 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xnor3x2 : ENTITY IS TRUE;
END xnor3x2;

ARCHITECTURE behavioral OF xnor3x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd :=  VitalXNOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xor2x1.vhd
-- Description  : 2 input XOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xor2x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (108.212710 ps, 93.935850 ps);
  tpd_in2_q        : VitalDelayType01 := (111.023210 ps, 102.721430 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xor2x1 : ENTITY IS TRUE;
END xor2x1;

ARCHITECTURE behavioral OF xor2x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalXOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xor2x2.vhd
-- Description  : 2 input XOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xor2x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (120.005970 ps, 108.458200 ps);
  tpd_in2_q        : VitalDelayType01 := (120.878710 ps, 115.735390 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xor2x2 : ENTITY IS TRUE;
END xor2x2;

ARCHITECTURE behavioral OF xor2x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalXOR2( in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xor3x1.vhd
-- Description  : 3 input XOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xor3x1 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (206.209500 ps, 205.410250 ps);
  tpd_in2_q        : VitalDelayType01 := (209.965760 ps, 207.758510 ps);
  tpd_in3_q        : VitalDelayType01 := (77.744481 ps, 79.141910 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xor3x1 : ENTITY IS TRUE;
END xor3x1;

ARCHITECTURE behavioral OF xor3x1 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalXOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
-- Filename     : xor3x2.vhd
-- Description  : 3 input XOR
-- Library      : saed90nm_typ
-- Generated by : vital_modeler version $Revision: #1 $ ($DateTime: 2006/12/01 04:56:29 $)
-- Copyright    : (c) 1994 VEDA Design Automation Ltd.
-- Copyright    : (c) 1992-1999 Avant! Corp. All rights reserved.

LIBRARY ieee;                  USE ieee.std_logic_1164.ALL;
                               USE ieee.vital_timing.ALL;
                               USE ieee.vital_primitives.ALL;

ENTITY xor3x2 IS
 GENERIC
 (
  tpd_in1_q        : VitalDelayType01 := (223.781550 ps, 235.341650 ps);
  tpd_in2_q        : VitalDelayType01 := (227.118620 ps, 236.620980 ps);
  tpd_in3_q        : VitalDelayType01 := (92.758312 ps, 90.918828 ps);
  tipd_in1      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in2      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  tipd_in3      : VitalDelayType01Z := (0 ps,0 ps,0 ps,0 ps,0 ps,0 ps);
  TimingChecksOn : Boolean    := TRUE;
  XOn            : Boolean    := TRUE;
  MsgOn          : Boolean    := TRUE;
  InstancePath   : string     := ""
 );
 PORT
 (
  in1        : IN         std_logic;
  in2        : IN         std_logic;
  in3        : IN         std_logic;
  q          : OUT        std_logic
 );
ATTRIBUTE VITAL_LEVEL0 OF xor3x2 : ENTITY IS TRUE;
END xor3x2;

ARCHITECTURE behavioral OF xor3x2 IS

ATTRIBUTE VITAL_LEVEL1 OF behavioral : ARCHITECTURE IS TRUE;

SIGNAL in1_ipd         : std_logic :='X';
SIGNAL in2_ipd         : std_logic :='X';
SIGNAL in3_ipd         : std_logic :='X';

BEGIN

WIREDELAY : BLOCK
BEGIN
  VitalWireDelay ( in1_ipd, in1, tipd_in1 );
  VitalWireDelay ( in2_ipd, in2, tipd_in2 );
  VitalWireDelay ( in3_ipd, in3, tipd_in3 );
END BLOCK;

VITALBehavior : PROCESS (in1_ipd,in2_ipd,in3_ipd)
VARIABLE q_GlitchData : VitalGlitchDataType;
VARIABLE q_zd : std_ulogic;

BEGIN


q_zd := VitalXOR3( in3_ipd, in2_ipd, in1_ipd );

--------------------
--Path Delay Section
--------------------
VitalPathDelay01Z (q, q_GlitchData, "q", q_zd,
 Paths=>(0=>(in1_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in1_q),TRUE),
 1=>(in2_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in2_q),TRUE),
 2=>(in3_ipd'LAST_EVENT,VitalExtendToFillDelay(tpd_in3_q),TRUE)),
 DefaultDelay=>VitalZeroDelay01Z, Mode=>OnDetect, XOn=>XOn, MsgOn=>MsgOn );
END PROCESS;
END behavioral;
